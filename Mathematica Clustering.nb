(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    987950,      19408]
NotebookOptionsPosition[    982238,      19304]
NotebookOutlinePosition[    982579,      19319]
CellTagsIndexPosition[    982536,      19316]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Preamble", "Subsection",
 CellChangeTimes->{{3.839076136188486*^9, 
  3.8390761780031013`*^9}},ExpressionUUID->"e1b351bc-02a4-446c-8819-\
14d7e1cc067e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "Variables", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "website", " ", "=", " ", "\"\<https://www.northropgrumman.com/\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sentences1", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<An apple a day keeps the doctor away\>\"", ",", " ", 
         "\"\<Apple had a record-breaking quarter\>\"", ",", " ", 
         "\"\<Put an apple in a pie\>\"", ",", 
         "\"\<An apple is great on salad\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Green eggs and ham are tasty\>\"", ",", 
         "\"\<My brother and I are going home now\>\""}], "}"}]}], "}"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Instantiate", " ", "NN"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"net", "=", 
    RowBox[{
    "NetModel", "[", 
     "\"\<ELMo Contextual Word Representations Trained on 1B Word Benchmark\>\
\"", "]"}]}], "\n", 
   RowBox[{"elmo", "=", 
    RowBox[{"NetFlatten", "[", 
     RowBox[{
      RowBox[{"NetGraph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"net", ",", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#1", "+", "#2", "+", "#3"}], ")"}], "/", "3"}], "&"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"NetPort", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "#"}], "}"}], "]"}], "&"}], ",", 
            RowBox[{"NetInformation", "[", 
             RowBox[{"net", ",", "\"\<OutputPortNames\>\""}], "]"}]}], "]"}], 
          "\[Rule]", "2"}], "}"}]}], "]"}], ",", "1"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MatrixPlot", "[", 
     RowBox[{"elmo", "[", "\"\<Hello world\>\"", "]"}], "]"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.839076182102242*^9, 3.839076191192379*^9}, {
   3.839076258996928*^9, 3.8390763175167828`*^9}, {3.839078102886778*^9, 
   3.839078153445695*^9}, {3.839078290297963*^9, 3.839078297568863*^9}, 
   3.839078490174178*^9, {3.839078539777461*^9, 3.839078597641633*^9}, 
   3.839078646209972*^9, {3.8390813511147547`*^9, 3.8390813787643957`*^9}, 
   3.8390830372295847`*^9, {3.8390831166479883`*^9, 3.839083168718597*^9}, 
   3.8390840077556067`*^9, 3.839326189686204*^9, {3.8393265478424063`*^9, 
   3.8393265799359217`*^9}, {3.839326672371613*^9, 3.839326672872348*^9}, {
   3.839335139316087*^9, 3.839335140546506*^9}, {3.839335559778782*^9, 
   3.8393355602711897`*^9}, {3.839335602315176*^9, 3.839335603588552*^9}, 
   3.83933677942662*^9, 3.839337113454506*^9, 3.839337593988039*^9, 
   3.8393378147487926`*^9, 3.839411467212888*^9, {3.839490822595435*^9, 
   3.839490823069339*^9}, {3.83968476246369*^9, 3.839684766220173*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"bc40a4b0-3342-493c-ba60-c94681d2ee43"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["31", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-16., 9.797174393178826*^-16}, {-15., 
                    9.18485099360515*^-16}}], 
                    
                    LineBox[{{-15., 
                    9.18485099360515*^-16}, {-14., -2.999999999999999}}], 
                    
                    LineBox[{{-15., 
                    9.18485099360515*^-16}, {-14., -1.9999999999999991`}}], 
                    
                    LineBox[{{-15., 
                    9.18485099360515*^-16}, {-14., -0.9999999999999991}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    8.572527594031472*^-16}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    1.0000000000000009`}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    2.000000000000001}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    3.000000000000001}}], 
                    
                    LineBox[{{-14., -2.999999999999999}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-14., -1.9999999999999991`}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-14., -0.9999999999999991}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-14., 8.572527594031472*^-16}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-14., 1.0000000000000009`}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-14., 2.000000000000001}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-14., 3.000000000000001}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    7.347880794884119*^-16}}], 
                    
                    LineBox[{{-12., 7.347880794884119*^-16}, {-11., 
                    6.735557395310443*^-16}}], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}}], 
                    
                    LineBox[{{-10., 6.123233995736766*^-16}, {-9., 
                    5.51091059616309*^-16}}], 
                    
                    LineBox[{{-9., 5.51091059616309*^-16}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-9., 
                    5.51091059616309*^-16}, {-8., -0.9999999999999996}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFKBzqel/18deuwzVXjso+/nise2PfdRCfnwGEb
nSC2eXlnFQ/8TPdKUV582IYtegNr9AbFAzYW2xcKNB+2SfIr0TgwQfFAU0b1
E+OEwzb2YA2KB87/mKbTa3XYZsEXz/lfPBUPKL7krJIROmzTtDz682ElxQOV
llfOPHx2yOaZSzsTz0+FA9dfflW5u+OQzdkzIKBwwOpXXhNfxyEbsPb5CgcW
7Jr86FboIRuZ44VApHCAvXqH03LlQzauLiCgcCDP+u6i4o8HbXIOigGRwoEr
vxmZHfYftNGovaRee0n+gNUetWSe3oM2FeUgIH9gYY334RtRB21OgIyTkT/A
blugvFTjoI042AC5A3l/pzQXfjtgM2smCMge2JXHs8cz+IDNi8l2LyfbyR6Q
1zeUEQMGg2XfY4u+xzIH+O6v/nHk7n6brg4QkDlwJ/7rjtjK/TY3mnSBSObA
sgd2ld9E9kPdI32gKLHDsn/DPqh7pA/YP7r4U91nH9Q90gd4kqV3HXi+10YC
7B6pAzcep1RFNu+1SU8DAakDS1LWWX2S22tjCoouXqkDWa0Lvobs3WPzb4OH
ZMUuyQPqzx4v9U7cY3MEFBw5kgdutFV4X+PaY9MIDn/JAzXpcc++7NxtY5cs
vr7+nsQBsY6pZcvzdtt8BYe3xIGlL2T/vNXYbbMCpDxV4oBG5/eyEy922YTN
EJblMpA4MC9T6bnZul02kPQjcYCra56PZeUuGwBbtSAr
                    "]], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-6., 
                    3.6739403974420594`*^-16}, {-5., -0.9999999999999997}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQESB7i65vlYVu6yWZn+5tHX8+IHylZJbbJ22WUT
uYTH5u4s8QNvu1yVVnHusuHZlsC9LUH8QKG2/NyWkzttDs95EdCgKH7gb/dy
pdPNO23qI0AaxA7MWHNvU63FThv7l5PtXk4WO2Dbe8R3zvMdNiz+25+1u4od
eKsb+Vlt4g6bs518rBKfRA+s7JuzWNZ0h82smSAgeqBgfV9cw+XtNmDtdqIH
bAxuyEnmb7ex7Hts0fdY5ADXRsX7G7m223R2gIDIgWuG2fO9lm2zudmke6NJ
V+TA4k1b4h87brPRqL2kXntJ+EC+8T/5mrtbbSrKQUD4gM0W9wcilVttjhfK
AJHwAU7TiQvWimy1Ec85KJZzUOjAta23Etw2bLFJAwOhA4vMVBTve2+xMSn7
+Os5r9CB9HCxO46vNtv83eAhWbFL8IDKjsgei77NNofEQAYIHrgW8c7wsPlm
m6bl0Z8PKwkeqLS8cubhs002dsni6+vvCRwQiuKOnTJ7k80Xz/lAJHBgwa7J
j26FbrJZAVKeKnBAOTo3dqvoJpuwGcKyXAYCB2ZbzzirfHujDSS+BA6wx4gY
qy3baAMAU47RGA==
                    "]], 
                    
                    LineBox[{{-8., 2.0000000000000004`}, {-7., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-7., 2.0000000000000004`}, {-6., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-7., 2.0000000000000004`}, {-6., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEyBxghDIeV6W8efT0vfWCNgbqVSAKDQ+QSHpu7
s6QPBGx/1u56isGBZ1sC97YE6QOvJ9u9nGzH6HB4zouABkXpAzXH9OL+72F0
aIgAaZA6wOIP0sDk4PASpFDqQIvujSbdG0wOEHGpA78TJxp9KGF2ONvJxyrx
SfJAJthaFodZM0FA8sC5MyDAAtFuJ3nAXieIbV4eq4NF32Mgkjhwzbjs46/n
rA6dHSAgcaAfJGzB5nCzCWSRxIEc61l3whPZHDRqL6nXXhKH8yvKQUAcrv54
oQwQicPNE885KAZEBxyg9qWBgRjcPUYgZbxiBzKg7v27wUOyYpco3D9g3Tmi
B1qh/m1cHv35sJLoAVZoeNgmi6+vvydyoBoaXl885wORyIFX0PAEK08VgYd3
2AxhWS4DkQProPEBiSYReHwBAIqqw8Q=
                    "]], 
                    
                    LineBox[{{-6., 1.0000000000000004`}, {-5., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., -0.9999999999999997}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 2.}}], 
                    
                    LineBox[{{-6., 2.0000000000000004`}, {-5., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
                    LineBox[{{-3., 2.}, {-1.9999999999999998`, 2.}}], 
                    LineBox[{{-1.9999999999999998`, 2.}, {-0.9999999999999999,
                     2.}}], 
                    
                    LineBox[{{-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}], 
                    
                    LineBox[{{-8., -0.9999999999999996}, {-7., \
-0.9999999999999996}}], 
                    
                    LineBox[{{-7., -0.9999999999999996}, {-6., \
-1.9999999999999996`}}], 
                    
                    LineBox[{{-6., -1.9999999999999996`}, {-5., \
-1.9999999999999998`}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    9.42978035343462*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.487170824512628`, -1.5384875264621136`}, \
{-0.25, 0}, 
                    Offset[8], {1., -3.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.417705098312485`, -1.1645898033750304`}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -0.5999999999999991}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    8.817456953860943*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    0.6000000000000009}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.417705098312485`, 
                    1.1645898033750322`}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.487170824512628`, 
                    1.5384875264621154`}, {-0.25, 0}, 
                    Offset[8], {1., 3.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.487170824512628`, -1.4615124735378846`}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"32\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "32"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.417705098312485`, -0.835410196624968}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"32\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "32"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -0.3999999999999992}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"64\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "64"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    8.205133554287267*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"128\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "128"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    0.40000000000000085`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"256\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "256"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.417705098312485`, 
                    0.8354101966249695}, {-0.25, 0}, 
                    Offset[8], {1., -2.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.487170824512628`, 
                    1.4615124735378864`}, {-0.25, 0}, 
                    Offset[8], {1., -3.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    7.59281015471359*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    6.980486755139913*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    6.368163355566237*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    5.755839955992561*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.417705098312485, 
                    1.1645898033750317`}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -0.5999999999999995}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.355555555555555, 
                    4.50397878353082*^-16}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888889035, -5.442874662877256*^-18}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -0.5999999999999996}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.777777777777779, 
                    2.925545131296455*^-16}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777803`, -1.0885749325754216`*^-17}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.777777777777779, 
                    2.7283950617283956`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777803`, -0.09876543209876543}], 
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["4", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -0.39999999999999974`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.417705098312484, 
                    1.1645898033750313`}, {-0.25, 0}, 
                    Offset[8], {1., 1.9999999999999998`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-2.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999999, 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["5", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 2.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"6\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["6", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -0.9999999999999996}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"7\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["7", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -1.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"8\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["8", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -1.9999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"8\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["8", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-16., 9.797174393178826*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-15., 9.18485099360515*^-16}], 
                    Offset[{10, 10}, {-15., 9.18485099360515*^-16}]]}, 
                    InsetBox[
                    FormBox["\"E\"", TraditionalForm], 
                    Offset[{0, -1}, {-15., 9.18485099360515*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"char_embed\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"EmbeddingLayer", "[", 
                    RowBox[{"16", ",", "262", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "50", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "262"}], "]"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["char_embed", Bold], 
                    Style[
                    HoldForm[
                    EmbeddingLayer[16, 262, "Input" -> {"Varying", 50, 
                    Restricted["Integer", 262]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -2.999999999999999}], 
                    Offset[{12, 12}, {-14., -2.999999999999999}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., -2.999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -1.9999999999999991`}], 
                    Offset[{12, 12}, {-14., -1.9999999999999991`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., -1.9999999999999991`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -0.9999999999999991}], 
                    Offset[{12, 12}, {-14., -0.9999999999999991}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., -0.9999999999999991}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 8.572527594031472*^-16}], 
                    Offset[{12, 12}, {-14., 8.572527594031472*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., 8.572527594031472*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 1.0000000000000009`}], 
                    Offset[{12, 12}, {-14., 1.0000000000000009`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., 1.0000000000000009`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 2.000000000000001}], 
                    Offset[{12, 12}, {-14., 2.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., 2.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_6", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 3.000000000000001}], 
                    Offset[{12, 12}, {-14., 3.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-14., 3.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn_7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn_7", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., 7.960204194457795*^-16}], 
                    Offset[{10, 10}, {-13., 7.960204194457795*^-16}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-13., 7.960204194457795*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"catenate\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "64"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "256"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["catenate", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    2, "Inputs" -> {{"Varying", 32}, {"Varying", 32}, {
                    "Varying", 64}, {"Varying", 128}, {"Varying", 256}, {
                    "Varying", 512}, {"Varying", 1024}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., 7.347880794884119*^-16}], 
                    Offset[{10, 10}, {-12., 7.347880794884119*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-12., 7.347880794884119*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "2048"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {"Varying", 2048}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 6.735557395310443*^-16}], 
                    Offset[{12, 12}, {-11., 6.735557395310443*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., 6.735557395310443*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"highway1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["highway1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 6.123233995736766*^-16}], 
                    Offset[{12, 12}, {-10., 6.123233995736766*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., 6.123233995736766*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"highway2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["highway2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., 5.51091059616309*^-16}], 
                    Offset[{10, 10}, {-9., 5.51091059616309*^-16}]]}, 
                    InsetBox[
                    FormBox["\"M\"", TraditionalForm], 
                    Offset[{0, -1}, {-9., 5.51091059616309*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"projection\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"LinearLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "2048"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["projection", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    LinearLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], 
                    "Input" -> {"Varying", 2048}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"backward\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceReverseLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["backward", Bold], 
                    Style[
                    HoldForm[
                    SequenceReverseLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., -0.9999999999999996}], 
                    Offset[{10, 10}, {-8., -0.9999999999999996}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., -0.9999999999999996}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"projection/remove_bos\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["projection/remove_bos", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 3.6739403974420594`*^-16}], 
                    Offset[{10, 10}, {-6., 3.6739403974420594`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., 3.6739403974420594`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn1/forward\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn1/forward", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-5., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rnn1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn1", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    2, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., -0.9999999999999997}], 
                    Offset[{10, 10}, {-5., -0.9999999999999997}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., -0.9999999999999997}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/forward\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/forward", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-4., 2.4492935982947064`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/forward/residual\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/forward/residual", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn1/backward\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn1/backward", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., 1.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn1/backward/reverse\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceReverseLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn1/backward/reverse", Bold], 
                    Style[
                    HoldForm[
                    SequenceReverseLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/backward\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/backward", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-5., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/backward/residual\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/backward/residual", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn1/remove_bos\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn1/remove_bos", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn1/embedding\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn1/embedding", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2., 1.0000000000000002`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"ContextualEmbedding/1\"", Bold, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ContextualEmbedding/1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 2.}], 
                    Offset[{10, 10}, {-3., 2.}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 2.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rnn2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    2, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-4., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/backward/reverse\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceReverseLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/backward/reverse", Bold], 
                    Style[
                    HoldForm[
                    SequenceReverseLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1.9999999999999998`, 2.}], 
                    Offset[{10, 10}, {-1.9999999999999998`, 2.}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-1.9999999999999998`, 2.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/remove_bos\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/remove_bos", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 2.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 2.}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-0.9999999999999999, 2.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"rnn2/embedding\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rnn2/embedding", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.2246467991473532`*^-16, 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"ContextualEmbedding/2\"", Bold, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ContextualEmbedding/2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., -0.9999999999999996}], 
                    Offset[{10, 10}, {-7., -0.9999999999999996}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., -0.9999999999999996}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"embedding\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["embedding", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., -1.9999999999999996`}], 
                    Offset[{10, 10}, {-6., -1.9999999999999996`}]]}, 
                    InsetBox[
                    FormBox["\"M\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., -1.9999999999999996`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"duplicate\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["duplicate", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    NetChain[
                    Skeleton[2]], "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5., -1.9999999999999998`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Embedding\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Embedding", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 35), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGBQBmIQDQEGB9hjRIzVll20gfD1DriLPT5/uPsClK9z4N9/
EGA/AOP/AfP/74fxf4C57+F8noXJNw89OgfXzwKmP9jD+FC7HVD5HFC+1oFu
UUbhf2vPQPVrHODqmudjWXkKylc70PXPuq3E5QSUr3KAs/jm/vX8x6B8pQMd
z8t+vrp1GMpXOMCIYp8C1P0w90pAzd8FVS8CVQ9zr8iBvyjqBaDhtRGqXgbN
fAmof2D6JdDkRdD4Amj2caDxGTDkGbDqZ3D4jxIvMP57OB/i7oU2qPplMMLj
H4o5Igdg5gIAa/WayQ==
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 24, 24, 24, 24, 24, 24, 24, 20, 20, 24, 24, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20,
                     20, 20, 20, 8, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {616., 256.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "char_embed"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_2"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_3"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_4"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_5"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_6"], 
                    NeuralNetworks`NetPath["Nodes", "cnn_7"], 
                    NeuralNetworks`NetPath["Nodes", "catenate"], 
                    NeuralNetworks`NetPath["Nodes", "relu"], 
                    NeuralNetworks`NetPath["Nodes", "highway1"], 
                    NeuralNetworks`NetPath["Nodes", "highway2"], 
                    NeuralNetworks`NetPath["Nodes", "projection"], 
                    NeuralNetworks`NetPath["Nodes", "backward"], 
                    NeuralNetworks`NetPath["Nodes", "projection/remove_bos"], 
                    
                    NeuralNetworks`NetPath["Nodes", "rnn1/forward"], 
                    NeuralNetworks`NetPath["Nodes", "rnn1"], 
                    NeuralNetworks`NetPath["Nodes", "rnn2/forward"], 
                    NeuralNetworks`NetPath["Nodes", "rnn2/forward/residual"], 
                    
                    NeuralNetworks`NetPath["Nodes", "rnn1/backward"], 
                    NeuralNetworks`NetPath["Nodes", "rnn1/backward/reverse"], 
                    
                    NeuralNetworks`NetPath["Nodes", "rnn2/backward"], 
                    NeuralNetworks`NetPath["Nodes", "rnn2/backward/residual"], 
                    NeuralNetworks`NetPath["Nodes", "rnn1/remove_bos"], 
                    NeuralNetworks`NetPath["Nodes", "rnn1/embedding"], 
                    NeuralNetworks`NetPath[
                    "Outputs", "ContextualEmbedding/1"], 
                    NeuralNetworks`NetPath["Nodes", "rnn2"], 
                    NeuralNetworks`NetPath["Nodes", "rnn2/backward/reverse"], 
                    
                    NeuralNetworks`NetPath["Nodes", "rnn2/remove_bos"], 
                    NeuralNetworks`NetPath["Nodes", "rnn2/embedding"], 
                    NeuralNetworks`NetPath[
                    "Outputs", "ContextualEmbedding/2"], 
                    NeuralNetworks`NetPath["Nodes", "embedding"], 
                    NeuralNetworks`NetPath["Nodes", "duplicate"], 
                    NeuralNetworks`NetPath["Outputs", "Embedding"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50}, 
                    NeuralNetworks`IndexIntegerT[262]], "Type" -> "Function", 
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Function[
                    NeuralNetworks`Private`Initial`x, "\[Ellipsis]"]], 
                    "OutputType" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50}, 
                    NeuralNetworks`IndexIntegerT[262]], "Pattern" -> 
                    NeuralNetworks`ValidatedParameter[
                    Alternatives[
                    Blank[String], 
                    Blank[TextElement]]], "Batched" -> True, "$Version" -> 
                    "12.0.11"]], 
                    Association[
                    "ContextualEmbedding/1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[173942919], 1024}, 
                    NeuralNetworks`RealT], "ContextualEmbedding/2" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[22002797], 1024}, 
                    NeuralNetworks`RealT], "Embedding" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1851645389], 1024}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "char_embed" -> 
                    Association[
                    "Type" -> "Embedding", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{262, 16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimension" -> 16, "ClassCount" -> 262, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50}, 
                    NeuralNetworks`IndexIntegerT[262]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]]], "cnn_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 16, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 50}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 50, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 50, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 32}, 
                    NeuralNetworks`RealT]]], "cnn_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 16, 1, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 49}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 49, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 49, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 32}, 
                    NeuralNetworks`RealT]]], "cnn_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 16, 1, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 48}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 48, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 48, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 64}, 
                    NeuralNetworks`RealT]]], "cnn_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 16, 1, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 4}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 47}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 47, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 47, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 128}, 
                    NeuralNetworks`RealT]]], "cnn_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 16, 1, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 46}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 46, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 46, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 256}, 
                    NeuralNetworks`RealT]]], "cnn_6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 16, 1, 6}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 6}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 45}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 45, 512}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 45, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "cnn_7" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1024, 16, 1, 7}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2094810223], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2109152077], 44}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 44, 1024}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 44, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2094810223], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]]], "catenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 2], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 32}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 32}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 64}, 
                    NeuralNetworks`RealT], "4" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 128}, 
                    NeuralNetworks`RealT], "5" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 256}, 
                    NeuralNetworks`RealT], "6" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT], "7" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2109152077], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "highway1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "transform_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2109152077],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2109152077], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "carry_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2109152077],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "sigmoid" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2109152077], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "out" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}], "highway2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "transform_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2109152077],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2109152077], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "carry_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2109152077],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "sigmoid" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2109152077], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]], "out" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}], "projection" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2109152077],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "rnn1/forward" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2109152077]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "backward" -> 
                    Association[
                    "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "rnn1/backward" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2109152077]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "rnn1/backward/reverse" -> 
                    Association[
                    "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "rnn1" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 2], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]]], "rnn1/remove_bos" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2109152077], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1199195779]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1199195779], 1024}, 
                    NeuralNetworks`RealT]]], "rnn1/embedding" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1199195779], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[173942919]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1199195779], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[173942919], 1024}, 
                    NeuralNetworks`RealT]]], "rnn2/forward" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2109152077]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "rnn2/forward/residual" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "rnn2/backward" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2109152077]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "rnn2/backward/residual" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "rnn2/backward/reverse" -> 
                    Association[
                    "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]]], "rnn2" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 2], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]]], "rnn2/remove_bos" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2109152077], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1154576699]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1154576699], 1024}, 
                    NeuralNetworks`RealT]]], "rnn2/embedding" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1154576699], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[22002797]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1154576699], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[22002797], 1024}, 
                    NeuralNetworks`RealT]]], "projection/remove_bos" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2109152077], 
                    "$Shape" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2084496893]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2109152077], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2084496893], 512}, 
                    NeuralNetworks`RealT]]], "embedding" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2084496893], 
                    "$Shape" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1851645389]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2084496893], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1851645389], 512}, 
                    NeuralNetworks`RealT]]], "duplicate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 512}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1851645389], "$InputShape" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1851645389], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1851645389], 1024}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"expression\"", "SummaryItem"], "", "", 
                    StyleBox[
                    
                    TemplateBox[{"\"ContextualEmbedding/1\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, "RowWithSeparators"],
                     "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    
                    TemplateBox[{"\"ContextualEmbedding/2\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"6\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, "RowWithSeparators"],
                     "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"Embedding\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"8\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, "RowWithSeparators"],
                     "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.839337595163818*^9, 3.839337816111196*^9, 
  3.839342293109007*^9, 3.8394114737895393`*^9, 3.8394116043846893`*^9, 
  3.839672732585308*^9, 3.8396847677472467`*^9, 3.83968613810536*^9, 
  3.8768258195578127`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"6f7774f6-8e16-4b06-bca6-532bd6d69c82"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, "RowWithSeparators"],
                     "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["32", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-17., 
                    1.0409497792752501`*^-15}, {-16., \
-4.228003697692507*^-10}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., \
-2.999999999323278}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., \
-1.9999999989408357`}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., \
-0.9999999980597059}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., 
                    8.838592383518031*^-10}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., 
                    0.9999999968586062}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., 
                    1.9999999978699643`}}], 
                    
                    LineBox[{{-16., -4.228003697692507*^-10}, {-15., 
                    2.999999997451199}}], 
                    
                    LineBox[{{-15., -2.999999999323278}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-15., -1.9999999989408357`}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-15., -0.9999999980597059}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-15., 8.838592383518031*^-10}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-15., 0.9999999968586062}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-15., 1.9999999978699643`}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-15., 2.999999997451199}, {-14., 
                    6.081685956445443*^-10}}], 
                    
                    LineBox[{{-14., 6.081685956445443*^-10}, {-13., 
                    6.01176793892325*^-10}}], 
                    
                    LineBox[{{-13., 6.01176793892325*^-10}, {-12., 
                    6.007219853090986*^-10}}], 
                    
                    LineBox[{{-12., 6.007219853090986*^-10}, {-11., 
                    6.006650806578979*^-10}}], 
                    
                    LineBox[{{-11., 6.006650806578979*^-10}, {-10., 
                    9.071647339230347*^-10}}], 
                    LineBox[CompressedData["
1:eJwBYQKe/SFib1JlAgAAACUAAAACAAAAAAAAAAAAJMD++/pggSsPPmzDoyE4
5yPA7RYM7eX/rb+IkLxeY8ojwFhcQODDOcC/VGdKt4GpI8DASwUtXy3Kv89H
TSuThCPA+OnIsGWt0r/6McW6l1sjwHf68j4E4di/1iWyZY8uI8Bb1wBBi7Hf
v2IjFCx6/SLAUkB5W32P47+eKusNWMgiwCr7Y1CplOe/iTs3CymPIsA0nEB/
Sejrv6svAwCWbiLAYjw7k5JA7r/+QipVfUwiwC4xGSqAPPC/fXWsCt8oIsAR
BxNhyUjxvyjHiSC7AyLA2B+L7iRF8r8COMKWEd0hwIV7gdKSMfO/CshVbeK0
IcAYGvYMEw70vz93RKQtiyHAkPvonaXa9L+iRY47818hwO4fWoVKl/W/Xhww
7uPEIMCTutTGVNP3vzu4AA8KmSDAT8SHIbxv+L+LX6Qw/mwgwOcIjDArCPm/
TRIbU8BAIMBYiOHzoZz5v4DQZHZQFCDAoEKIayAt+r9MNAM1Xc8fwMM3gJem
ufq/e97ifrV1H8C/Z8l3NEL7v5CfaMqpGx/AlNJjDMrG+7+Jd5QXOsEewER4
T1VnR/y/ZmZmZmZmHsDLWIxSDMT8vzN28frnDR7AP5MS60w7/b/8sEgZeLod
wLZG2gW9q/2/whZswRZsHcAsc+OiXBX+v4KnW/PDIh3Aoxguwit4/r88Yxev
f94cwBo3umMq1P6/9Umf9EmfHMCTzoeHWCn/v6hb88MiZRzAC9+WLbZ3/79W
mBMdCjAcwIVo51VDv/+/AAAAAAAAHMB/tTwAAAAAwDiEJe0=
                    "]], 
                    
                    LineBox[{{-10., 9.071647339230347*^-10}, {-9., 
                    1.1808657345054854`*^-9}}], 
                    LineBox[CompressedData["
1:eJwtk2kw3AcYh9dRZxy76LLr2l3iCiNHtY7ZN4g0xxAxjTCVcSRIJ1tHjKJE
Y2mshGRcRWMdFXGMCZoSt3dpxTGOXNMsW4x1Vp2lsYe/NpM+M795vv6+PIyw
aL9wRRKJdPK/vfcHLJCQSUPS7HTYGvQ4J9YSC7Mf3ahoqGgEYl3SrDPMQpU2
88EIKwHMJBfc/K2WhQIL5bmfu0egXuCReCqdhXVFcx2Zb15BKCr3Zwey8I/V
ZveehElQTpz0K7NjYapqG7dnbhZyl/utkiRMzLitrRQ2Mw8aFIG7ST8TiRBR
5dDRFYjaeVFxl8fEjVpG8K5wDQypwuNffsXE3uqh86OGm3BEbdI35QwTLZ52
KjUd24K656/frVkysUoe8ftPLttw/9KQdZMCE924IwPVjn+DqPmZuG+KgZue
Ky/a9HegUFRuffgXBqI77k0t7kDrm7R3wrsMrE/2ddWp2YWT/Cu+08EMbNwq
KfG79A8E3LRS5D43x4Y8f76/zx7YyPE2/aE5hrSetYoT7UFOfue9/ChzNH14
1qcxUgLpn1FZf7qb4/JJf4rmpgTUV1+dNjMwx46a6Lg78VLw8BevhU+YYeF4
YSxjTwo/bM1GnPvGDFPaBg+JEmSgXVuxt0o3Q06YmlfrjgzqkphV5wSmeG30
C1pTlBxcEkQLyDNBknMW21uZAK9ocsCpoyYYTUReuMwhwI7o8r4iNEZKjHH7
RB8Ba6yZAc00Y/wr53Fyu+oBZM4m9F+wNsbdyypFZNcDIJ3I9LQZp+OJMVdN
YdAB+JpqfV4cT8fazdNvdb4+gFvl6mOldDp691oRLTcO4PtnKW+dBDS0dplO
GQk4gB9L3mOE4zT/W4ljBJTpDe8VsI2wrPh1r14lAZo55IQ8sSF2UcO+48QR
sPBRjH4ezxBti4lOrhcBh1MXJvLtDXHeqD7en0rAxG5sQ9FLKm6UXmtYWt6H
BY5BDT+BimcYDiFOHftwVTyO1cZU3Hyskutxbx/OB1ZKGgUf45L9OvtQ0P7/
fwyw9NtFj08Ecnj0ZKWziG2AYZ/G0C1z5WAheZDOF+vjxV7+mFuIHAyTsjfr
efp4nRIdlOIgB67DjCLa62O14/yvYpkMQo14HaKXeqhB21eNG5RBi3MmVSFR
D0vG2i1tC2SQ+kBkZG+ih94+NFP1YBl003iCkD4K2paYbunYyCB2Kku7NJKC
Do0DZextKUxatFWLtCno7e7Z79wlhZYxNc7xTjJStRYyvLOkQBImh1ZwyMij
NIiTAqXQ4Um+w2KRsfJi8UzPESksag8Ju6Z1MWy4LtFYSQoZLlVBnHJdHE2Z
fZInkkDeQLn2sXBdnL3uxmW0S4D8tGdDy1EX+fe7tweLJfChd11UWL9KykqW
wL+5bQKb
                    "]], 
                    
                    LineBox[{{-7., -2.0000000017668635`}, {-6., \
-0.9999999989549334}}], 
                    
                    LineBox[{{-7., -2.0000000017668635`}, {-6., \
-3.0000000001194844`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEyB+q32oAYB1amv3n09bz0gbxISzA/cgmPzd1Z
0geuLjIF83m2JXBvS5A+sHmiIZh/eM6LgAZF6QMcarpgfkMESIPUgSvxGmC+
w8vJdi8nSx2QtFcG81n8tz9rdwXKH5YF88928rFKfJI8wPFOHMyfNRMEJA9s
2isI5oO120ke6JvHA+Zb9D0GIokDoX84wfzODhCQOMBxHcK/2aR7o0lX4sBS
PYh6jdpL6rWXxA/oMkPMqygHAfEDi0IkwPzjhTJAJH6AQVkJzBfPOSgGRAe8
8vTA/DQwEDtQb2YL5huVffz1nFfsgPFpHzD/7wYPyYpdogd+VUeD+WDdOaIH
rnpkgvmNy6M/H1YSPXDIsAzMt00WX19/T+TAIbMmMP+L53wgEjlwNbwXzAcr
TxU58GvKdDA/bIawLJeByAHjdwvAfEh8iRyoT14J5gMAQaGekw==
                    "]], 
                    
                    
                    LineBox[{{-9., 1.1808657345054854`*^-9}, {-8., 
                    5.255747406457505*^-10}}], 
                    
                    LineBox[{{-8., 
                    5.255747406457505*^-10}, {-7., -0.9999999986418397}}], 
                    
                    LineBox[{{-8., 5.255747406457505*^-10}, {-7., 
                    2.540048600421586*^-9}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEKBwyTk6QY+ZnsVqS/efT1vPyBPbukJvKxrrCP
WMJjc3eW/IGFFpxMGz122vNsS+DeliB/4MuOqOl2Lw/bH5rzIqBBUf7AHBbP
51/Pn7avA2uQO7B4f7qFvc4le/uXk+1eTpY7UCXyXTLn4DV7Zv/tz9pd5Q5c
bgia0bj8tv3ZTj5WiU+yB8KY9t60z39gP2smCMgeYLmwzdTY+LF9/FKgdjvZ
A+EM4jIVu57ai115bNH3WOaA2au7J17Pf26/S7Wzo6ND5sC8Xm6bvscv7L1m
6d1o0pU5MOHV/NL41pf2pwyvqNdekj7AyzgbzLd4U1leXi59QOziH2uQ+mkn
5Y8XykgfWBZ1FGzeg5NHxXIOSh04MveLNMg+ybfZaWlpUgeyZnWB3fPn8tdf
z3mlDshml4Dde4bDR7Jil+SBt296poP809Kdd1AsR/LA6wpGsH9VYmI/H1aS
PGBc5WYOCo/1VRLr6+9JHOh5uP0JKLxUn8//4jlf4oDPzuYpoPBsWQhUnipx
wP77g98bgOF9bqWwLJeBxAGDRT+aQfEBiS+JA+ekpKf9nym0DwAxwdj/
                    
                    "]], 
                    
                    LineBox[{{-7., -0.9999999986418397}, {-6., \
-0.9999999989549334}}], 
                    
                    LineBox[{{-6., -0.9999999989549334}, {-5., \
-1.0000000013673682`}}], 
                    LineBox[CompressedData["
1:eJxN0l0oQ2EYB/Cz2XybbUcou1nRSlniZkbTMMnXFiXyNQoXLnxe+Qr5DiU3
Jik1FwophQvyL0Wxkl254YKSsVi+m4vZeV4X5997evvVeZ/36TlH29xR0SLl
OC4l+Ag7SxwCX/XB3Xe80ea9+7zkkapvIFc7o3NulnmktDNH79mj9uw8XraY
T1YebcNaHhNfzEN0QA1vQSM517No8iyqoXUwy6z7D5MWNZLfmV3TCnnimwrf
FXbyskOICksHzE/CcZMKv7fMWfP3hvl7JRJGmGemhCjhWWX1rkfTgkuJTgPr
x+Z3Wv3OWGyX1ZF9L0IUcN7WkKmcQQHbcxVZTwVisNtTSc6kRCHDayFf6Qbd
usFIlCvzyN2asy7NWQSOfkxkXiUkAgPrOeQdeW1whWM2PlvUTxi8JUbyK/UT
ilWLUdRPKNZCskX9yPExzuq5KDIsudh9rcLnSpKhv9lM9jctZPh6QzDnzieP
CeO4lsKlKRTNXwqDuYjcd6pvCBxK4M4tFs1bAkdiKZleP+cwd1FG3kzXGePs
HHaqreT/HwiBYxv5D1lHAhY=
                    "]], 
                    
                    LineBox[{{-2., -1.000000001175067}, {-1., \
-5.582591553996556*^-10}}], 
                    
                    LineBox[{{-6., -3.0000000001194844`}, {-5., \
-2.0000000049298587`}}], 
                    
                    LineBox[{{-5., -2.0000000049298587`}, {-4., \
-1.0412575017629215`*^-9}}], 
                    
                    LineBox[{{-7., 
                    2.540048600421586*^-9}, {-6., -1.0827530750666314`*^-9}}], 
                    
                    LineBox[{{-6., -1.0827530750666314`*^-9}, {-5., \
-1.2428242038110067`*^-9}}], 
                    
                    LineBox[{{-5., -1.2428242038110067`*^-9}, {-4., \
-1.0412575017629215`*^-9}}], 
                    
                    LineBox[{{-4., -1.0412575017629215`*^-9}, {-3., \
-6.20047829236674*^-10}}], 
                    
                    LineBox[{{-3., -6.20047829236674*^-10}, {-2., \
-6.413073291229561*^-10}}], 
                    
                    LineBox[{{-2., -6.413073291229561*^-10}, {-1., \
-5.582591553996556*^-10}}], 
                    
                    LineBox[{{-4., 1.5926599517105162`}, {-3., 
                    1.4079211794428945`}}], 
                    
                    LineBox[{{-3., 1.4079211794428945`}, {-2., 
                    1.1787755000974587`}}], 
                    
                    LineBox[{{-2., 
                    1.1787755000974587`}, {-1., -5.582591553996556*^-10}}], 
                    
                    LineBox[{{-1., -5.582591553996556*^-10}, \
{-3.3403851294386725`*^-26, -5.455262908071745*^-10}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -2.536798054816387*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -4.2280141071902996`*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.487170824434397`, -1.5384875265557447`}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.9999999989004777`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.417705098213071`, -1.1645898031337176`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.9999999985180352`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -0.5999999990049436}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999976369055}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    3.6119539510338156`*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 1.306659608121054*^-9}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    0.5999999979460435}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999972814065}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.41770509819796, 
                    1.1645898021871661`}, {-0.25, 0}, 
                    Offset[8], {1., 1.9999999982927648`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.48717082436136, 
                    1.5384875254028416`}, {-0.25, 0}, 
                    Offset[8], {1., 2.9999999978739993`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"50\"", "\"16\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["1", 7]], Italic], "50", "16"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.48717082450775, -1.4615124728816868`}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.999999999931447}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"32\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "32"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.41770509828223, -0.8354101957679093}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.9999999995490043`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"32\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "32"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -0.3999999988589812}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999986678745}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"64\""}, "RowWithSeparators"]], 
                    Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "64"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    7.184448527274479*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -2.756906427072588*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"128\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "128"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    0.39999999910834366`}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999962504376}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"256\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "256"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.417705098128799`, 
                    0.8354101957220067}, {-0.25, 0}, 
                    Offset[8], {1., -1.9999999972617957`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.487170824288008`, 
                    1.4615124719342034`}, {-0.25, 0}, 
                    Offset[8], {1., -2.99999999684303}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    6.039735145932127*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -6.991801752219327*^-12}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    6.009039087423892*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -4.54808583226405*^-13}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    6.006878425183781*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -5.690465120074894*^-14}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    7.8456487261698*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 3.064996532651369*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2048\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "2048"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.578192032208701, -1.3962375609968984`}, \
{-0.25, 0}, 
                    Offset[8], {0.3872811221930892, -0.18571392044754087`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    1.0713853342725052`*^-9}, {-0.25, 0}, 
                    Offset[8], {1., 2.7370100058245065`*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.34630398315096, 
                    1.5364731636384774`}, {-0.25, 0}, 
                    Offset[8], {0.08671955466988202, 0.03469518553377515}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -1.4000000000797055`}, {-0.25, 0}, 
                    Offset[8], {1., 1.0000000028119302`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -2.600000000778436}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999983526209}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.777777777777779, -2.000000001029714}, {-0.25,
                     0}, 
                    Offset[8], {
                    0.17777777777777803`, -6.432010479784367*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    7.876911381896444*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -6.552909938597348*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -0.5999999989748739}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999991674144}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    1.7342590565112517`*^-9}, {-0.25, 0}, 
                    Offset[8], {1., 2.0144738597758355`*^-9}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.777777777976336, 
                    0.7283950671023668}, {-0.25, 0}, 
                    Offset[8], {0.1777777776665843, -0.09876543289429152}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -0.9999999988296959}, {-0.25, 0}, 
                    Offset[8], {1., -3.13093662107633*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -1.0000000004023943`}, {-0.25, 0}, 
                    Offset[8], {1., -2.4124348074749946`*^-9}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.355555555555555, -1.0000000009894308`}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 5.615508058554042*^-11}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["4", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.4000000008049823}, {-0.25, 0}, 
                    Offset[8], {1., 1.0000000006168077`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -2.400000003005709}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999951896257}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4177050985733395`, -0.8354101998122254}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.0000000038886014`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    3.663675951286555*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -3.6228016754882174`*^-9}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -1.1787957523132565`*^-9}, {-0.25, 0}, 
                    Offset[8], {1., -1.600711287443753*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -1.1218841825821556`*^-9}, {-0.25, 0}, 
                    Offset[8], {1., 2.0156670204808528`*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4, -7.885316982471729*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 4.2120967252624745`*^-10}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["3", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -6.328035291684433*^-10}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.125949988628214*^-11}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["5", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -5.914784248889758*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 8.304817372330057*^-11}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.4818166883499433`}, {-0.25, 0}, 
                    Offset[8], {1., -0.1847387722676217}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"6\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["6", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.2704337718356329`}, {-0.25, 0}, 
                    Offset[8], {1., -0.22914567934543584`}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"512\""}, "RowWithSeparators"]],
                     Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "512"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.47151019970402797`}, {-0.25, 0}, 
                    Offset[8], {1., -1.178775500655718}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4, -5.506194366441669*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 1.2732864592481054`*^-11}], 
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, 
                    "RowWithSeparators"]], Annotation[#, 
                    Row[{
                    Style[
                    Subscript["n", 
                    Style["2", 7]], Italic], "1024"}, "\[Cross]"], 
                    "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., 1.0409497792752501`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-16., -4.228003697692507*^-10}], 
                    Offset[{10, 10}, {-16., -4.228003697692507*^-10}]]}, 
                    InsetBox[
                    FormBox["\"E\"", TraditionalForm], 
                    Offset[{0, -1}, {-16., -4.228003697692507*^-10}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"EmbeddingLayer", "[", 
                    RowBox[{"16", ",", "262", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "50", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "262"}], "]"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    EmbeddingLayer[16, 262, "Input" -> {"Varying", 50, 
                    Restricted["Integer", 262]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -2.999999999323278}], 
                    Offset[{12, 12}, {-15., -2.999999999323278}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., -2.999999999323278}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -1.9999999989408357`}], 
                    Offset[{12, 12}, {-15., -1.9999999989408357`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., -1.9999999989408357`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -0.9999999980597059}], 
                    Offset[{12, 12}, {-15., -0.9999999980597059}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., -0.9999999980597059}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 8.838592383518031*^-10}], 
                    Offset[{12, 12}, {-15., 8.838592383518031*^-10}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., 8.838592383518031*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 0.9999999968586062}], 
                    Offset[{12, 12}, {-15., 0.9999999968586062}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., 0.9999999968586062}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["6", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 1.9999999978699643`}], 
                    Offset[{12, 12}, {-15., 1.9999999978699643`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., 1.9999999978699643`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["7", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 2.999999997451199}], 
                    Offset[{12, 12}, {-15., 2.999999997451199}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., 2.999999997451199}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["8", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-14., 6.081685956445443*^-10}], 
                    Offset[{10, 10}, {-14., 6.081685956445443*^-10}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-14., 6.081685956445443*^-10}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "64"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "256"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["9", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    2, "Inputs" -> {{"Varying", 32}, {"Varying", 32}, {
                    "Varying", 64}, {"Varying", 128}, {"Varying", 256}, {
                    "Varying", 512}, {"Varying", 1024}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., 6.01176793892325*^-10}], 
                    Offset[{10, 10}, {-13., 6.01176793892325*^-10}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-13., 6.01176793892325*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "2048"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["10", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {"Varying", 2048}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 6.007219853090986*^-10}], 
                    Offset[{12, 12}, {-12., 6.007219853090986*^-10}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]},
                     {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., 6.007219853090986*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["11", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 6.006650806578979*^-10}], 
                    Offset[{12, 12}, {-11., 6.006650806578979*^-10}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., 6.006650806578979*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["12", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-10., 9.071647339230347*^-10}], 
                    Offset[{10, 10}, {-10., 9.071647339230347*^-10}]]}, 
                    InsetBox[
                    FormBox["\"M\"", TraditionalForm], 
                    Offset[{0, -1}, {-10., 9.071647339230347*^-10}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"13\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"LinearLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "2048"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["13", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    LinearLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], 
                    "Input" -> {"Varying", 2048}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., -2.0000000017668635`}], 
                    Offset[{10, 10}, {-7., -2.0000000017668635`}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., -2.0000000017668635`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"14\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["14", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., 1.1808657345054854`*^-9}], 
                    Offset[{10, 10}, {-9., 1.1808657345054854`*^-9}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-9., 1.1808657345054854`*^-9}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"15\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceReverseLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["15", Bold], 
                    Style[
                    HoldForm[
                    SequenceReverseLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.5926599517105162`}], 
                    Offset[{10, 10}, {-4., 1.5926599517105162`}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 1.5926599517105162`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"29\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["29", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., -0.9999999989549334}], 
                    Offset[{10, 10}, {-6., -0.9999999989549334}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., -0.9999999989549334}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"18\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["18", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    2, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., -3.0000000001194844`}], 
                    Offset[{10, 10}, {-6., -3.0000000001194844`}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., -3.0000000001194844`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"21\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["21", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., -2.0000000049298587`}], 
                    Offset[{10, 10}, {-5., -2.0000000049298587`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-5., -2.0000000049298587`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"22\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["22", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 5.255747406457505*^-10}], 
                    Offset[{10, 10}, {-8., 5.255747406457505*^-10}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., 5.255747406457505*^-10}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"16\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["16", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., -0.9999999986418397}], 
                    Offset[{10, 10}, {-7., -0.9999999986418397}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., -0.9999999986418397}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"17\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceReverseLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["17", Bold], 
                    Style[
                    HoldForm[
                    SequenceReverseLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 2.540048600421586*^-9}], 
                    Offset[{10, 10}, {-7., 2.540048600421586*^-9}]]}, 
                    InsetBox[
                    FormBox["\"F\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 2.540048600421586*^-9}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"23\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"OutputState\"", "\[Rule]", "\"State\""}], ",", 
                    
                    RowBox[{
                    "\"OutputCellState\"", "\[Rule]", "\"CellState\""}]}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"OutputState\"", "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["23", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    NetGraph[
                    Skeleton[17], 
                    Skeleton[24]], {
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}, {"OutputState"}, 
                    "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., -1.0827530750666314`*^-9}], 
                    Offset[{10, 10}, {-6., -1.0827530750666314`*^-9}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-6., -1.0827530750666314`*^-9}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"24\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["24", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., -1.0000000013673682`}], 
                    Offset[{10, 10}, {-5., -1.0000000013673682`}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., -1.0000000013673682`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"19\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["19", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., -1.000000001175067}], 
                    Offset[{10, 10}, {-2., -1.000000001175067}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., -1.000000001175067}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"20\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["20", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -5.582591553996556*^-10}], 
                    Offset[{10, 10}, {-1., -5.582591553996556*^-10}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-1., -5.582591553996556*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"32\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.3333333333333333`", " ", 
                    RowBox[{"Plus", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["32", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Shallow[0.3333333333333333 (#3 + (# + #2))& , {4, 3}], 
                    "Inputs" -> {{"Varying", 1024}, {"Varying", 1024}, {
                    "Varying", 1024}}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., -1.0412575017629215`*^-9}], 
                    Offset[{10, 10}, {-4., -1.0412575017629215`*^-9}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., -1.0412575017629215`*^-9}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"26\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["26", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    2, "Inputs" -> {{"Varying", 512}, {"Varying", 512}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., -1.2428242038110067`*^-9}], 
                    Offset[{10, 10}, {-5., -1.2428242038110067`*^-9}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., -1.2428242038110067`*^-9}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"25\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceReverseLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["25", Bold], 
                    Style[
                    HoldForm[
                    SequenceReverseLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., -6.20047829236674*^-10}], 
                    Offset[{10, 10}, {-3., -6.20047829236674*^-10}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., -6.20047829236674*^-10}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"27\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["27", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., -6.413073291229561*^-10}], 
                    Offset[{10, 10}, {-2., -6.413073291229561*^-10}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., -6.413073291229561*^-10}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"28\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "1024"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["28", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.4079211794428945`}], 
                    Offset[{10, 10}, {-3., 1.4079211794428945`}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.4079211794428945`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"30\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["30", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.1787755000974587`}], 
                    Offset[{10, 10}, {-2., 1.1787755000974587`}]]}, 
                    InsetBox[
                    FormBox["\"M\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.1787755000974587`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"31\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["31", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    NetChain[
                    Skeleton[2]], "Input" -> {"Varying", 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    
                    DiskBox[{-3.3403851294386725`*^-26, \
-5.455262908071745*^-10}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGBQAmIQDQGGB44vdJ3WceCSDYRvcMC6uGzab96/eyF8vQN1
+1/8//+f/QCM/8dsO5D/fz+M/yP467///9/D+X8qKwSb4vjsYHwOhwCQvD2M
z7IgF6Qfzm/KWQEy3wHC1zkwTVfnXeNTFqh+rQMGD++fYlwB42scODVl8nLG
JTC+2oEUD/eWxsUwvsqBf79/JTRq80P5Mgfqt4K9BnW/0oEz4dfnNXiKQOUF
DjC+S2borP4JdY/Egb+xBf8R/pE48F+KBUhzQPWLHKhPXolknsIBw+QkKUZ+
Jrh9f0JdkfTLHNjcetR2wUVVO5h556Skp/2fKbQPZt7/b7FA+gNUPcOB//sD
kPgf9s/avPlOvR7zPph7TdLTd9Y/FoTrZ3Q8uPx/pCiUzwEx35d1H8w8kPr/
HGxwecabF6JvtH2zh8kzvnq8yfnOJ/sPgu4GvGuX7AIJNuxj2gcAivCtVw==

                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 24, 24, 24, 24, 24, 24, 24, 20, 20, 24, 24, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {651., 255.9999999149739}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Nodes", "5"], 
                    NeuralNetworks`NetPath["Nodes", "6"], 
                    NeuralNetworks`NetPath["Nodes", "7"], 
                    NeuralNetworks`NetPath["Nodes", "8"], 
                    NeuralNetworks`NetPath["Nodes", "9"], 
                    NeuralNetworks`NetPath["Nodes", "10"], 
                    NeuralNetworks`NetPath["Nodes", "11"], 
                    NeuralNetworks`NetPath["Nodes", "12"], 
                    NeuralNetworks`NetPath["Nodes", "13"], 
                    NeuralNetworks`NetPath["Nodes", "14"], 
                    NeuralNetworks`NetPath["Nodes", "15"], 
                    NeuralNetworks`NetPath["Nodes", "29"], 
                    NeuralNetworks`NetPath["Nodes", "18"], 
                    NeuralNetworks`NetPath["Nodes", "21"], 
                    NeuralNetworks`NetPath["Nodes", "22"], 
                    NeuralNetworks`NetPath["Nodes", "16"], 
                    NeuralNetworks`NetPath["Nodes", "17"], 
                    NeuralNetworks`NetPath["Nodes", "23"], 
                    NeuralNetworks`NetPath["Nodes", "24"], 
                    NeuralNetworks`NetPath["Nodes", "19"], 
                    NeuralNetworks`NetPath["Nodes", "20"], 
                    NeuralNetworks`NetPath["Nodes", "32"], 
                    NeuralNetworks`NetPath["Nodes", "26"], 
                    NeuralNetworks`NetPath["Nodes", "25"], 
                    NeuralNetworks`NetPath["Nodes", "27"], 
                    NeuralNetworks`NetPath["Nodes", "28"], 
                    NeuralNetworks`NetPath["Nodes", "30"], 
                    NeuralNetworks`NetPath["Nodes", "31"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50}, 
                    NeuralNetworks`IndexIntegerT[262]], "Type" -> "Function", 
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Function[
                    NeuralNetworks`Private`Initial`x, "\[Ellipsis]"]], 
                    "OutputType" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[416984991], 50}, 
                    NeuralNetworks`IndexIntegerT[262]], "Pattern" -> 
                    NeuralNetworks`ValidatedParameter[
                    Alternatives[
                    Blank[String], 
                    Blank[TextElement]]], "Batched" -> True, "$Version" -> 
                    "12.0.11"]], 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "Embedding", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{262, 16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimension" -> 16, "ClassCount" -> 262, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50}, 
                    NeuralNetworks`IndexIntegerT[262]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 16, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 50}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 50, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 50, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 16, 1, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 49}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 49, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 49, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 32}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 16, 1, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 48}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 48, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 48, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 64}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 16, 1, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 4}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 47}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 47, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 47, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 128}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 16, 1, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 46}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 46, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 46, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 256}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 16, 1, 6}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 6}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 45}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 45, 512}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 45, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1024, 16, 1, 7}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1687604172], 50}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1611692410], 44}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 44, 1024}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 44, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1687604172], 50, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 2], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 32}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 32}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 64}, 
                    NeuralNetworks`RealT], "4" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 128}, 
                    NeuralNetworks`RealT], "5" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 256}, 
                    NeuralNetworks`RealT], "6" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT], "7" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1611692410], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "transform_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1611692410],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1611692410], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "carry_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1611692410],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "sigmoid" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1611692410], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "out" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}], "12" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "transform_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1611692410],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1611692410], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "carry_gate" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2048, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2048}, "$OutputSize" -> 
                    2048, "$InputSize" -> 2048, "$InputDimensions" -> {2048}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1611692410],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "sigmoid" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1611692410], 2048}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]], "out" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transform_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "carry_gate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}], "13" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1611692410],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1611692410]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "15" -> Association[
                    "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1611692410]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "17" -> Association[
                    "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 2], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1611692410], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1263720017]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263720017], 1024}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1263720017], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2100732098]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263720017], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1611692410]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "22" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "OutputCellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT], 
                    "OutputState" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "Input & OutputState" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "gate_in/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_in/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "memory/tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_foget/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_foget" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "memory/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out/linear" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4096}, "$OutputSize" -> 
                    4096, "$InputSize" -> 1024, "$InputDimensions" -> {1024}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "gate_out/sigmoid" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "tanh" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "gate_out" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]], "projection" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 4096}], "Biases" -> 
                    None], "Parameters" -> 
                    Association["OutputDimensions" -> {512}, "$OutputSize" -> 
                    512, "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "projection/clip" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Clip, 
                    NeuralNetworks`Private`ScalarSymbol[1], {-3., 3.}}]]], 
                    "$Dimensions" -> {512}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Input & OutputState", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "gate_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "CellState"], 
                    NeuralNetworks`NetPath["Nodes", "memory", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_foget", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputCellState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "memory/clip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out/sigmoid", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gate_out", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "OutputState"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "projection/clip", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "OutputState" -> "State", "OutputCellState" -> 
                    "CellState"}], "ConstantPorts" -> {}, 
                    "OutputPorts" -> {"OutputState"}, 
                    "$InputNames" -> {"Input"}, 
                    "$StateNames" -> {"State", "CellState"}, 
                    "$OutputNames" -> {"OutputState"}, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1611692410]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["OutputState" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "24" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "25" -> 
                    Association[
                    "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]]], "26" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 2], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]]], "27" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1611692410], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[187755562]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[187755562], 1024}, 
                    NeuralNetworks`RealT]]], "28" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[187755562], 
                    "$Shape" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2100732098]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[187755562], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT]]], "29" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1611692410], 
                    "$Shape" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1272655152]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1611692410], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1272655152], 512}, 
                    NeuralNetworks`RealT]]], "30" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1272655152], 
                    "$Shape" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2100732098]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1272655152], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 512}, 
                    NeuralNetworks`RealT]]], "31" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 512}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2100732098], "$InputShape" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT]]], "32" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[5]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT], "3" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2100732098], 1024}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"expression\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"1024\""}, "RowWithSeparators"],
                     "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.839337595163818*^9, 3.839337816111196*^9, 
  3.839342293109007*^9, 3.8394114737895393`*^9, 3.8394116043846893`*^9, 
  3.839672732585308*^9, 3.8396847677472467`*^9, 3.83968613810536*^9, 
  3.8768258199610558`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"11ab7c83-10b9-44ff-81d7-2958f7549a1b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Web Scrape", "Subsection",
 CellChangeTimes->{{3.839076157808288*^9, 3.839076161565599*^9}, {
  3.839076296317504*^9, 3.839076300975708*^9}, {3.839076428896573*^9, 
  3.8390764292331467`*^9}},ExpressionUUID->"3372f7fe-8dbd-4e8d-b107-\
47379e39eb7b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"session", "=", 
   RowBox[{"StartWebSession", "[", 
    RowBox[{"\"\<Chrome\>\"", ",", " ", 
     RowBox[{"Visible", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"WebExecute", "[", 
   RowBox[{"session", ",", " ", 
    RowBox[{"\"\<OpenPage\>\"", "\[Rule]", " ", "website"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"innerText", "=", 
  RowBox[{"WebExecute", "[", 
   RowBox[{"session", ",", " ", 
    RowBox[{
    "\"\<JavascriptExecute\>\"", "\[Rule]", 
     "\"\<return document.getElementById('content').innerText\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8390753351316833`*^9, 3.839075350315317*^9}, {
   3.839076110108465*^9, 3.8390761203533487`*^9}, {3.839076196963892*^9, 
   3.8390762269481573`*^9}, 3.8390763337784853`*^9, {3.839076406126598*^9, 
   3.83907640928531*^9}, {3.8390766003004923`*^9, 3.839076637071546*^9}, {
   3.83907666749047*^9, 3.839076714909101*^9}, {3.839076888146449*^9, 
   3.8390768910327253`*^9}, {3.83907692500007*^9, 3.839076971111618*^9}, 
   3.839083065624358*^9, {3.8390836480046988`*^9, 3.8390836483498383`*^9}, {
   3.839083909462452*^9, 3.839083909817485*^9}, 3.83933521515222*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"1d05769a-57f1-42d9-a0a5-8057092c143f"],

Cell[BoxData["\<\"ESPAStar\[Trademark]: A Freight Train to Space\\nLearn More\
\\nForbes 2022 World\[CloseCurlyQuote]s Best Employers List\\nNorthrop \
Grumman Recognized for our Legendary Company Culture\\nJoin Us\\nFor some, \
the word 'impossible' ends discussions. For us, it's a starting \
point.\\nTechnology and Innovation\\nLearn More\\nJames Webb Space \
Telescope\\nHow Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\\nLearn More\"\>"], "Output",
 CellChangeTimes->{3.839672737776986*^9, 3.83968479521283*^9, 
  3.839686168290484*^9, 3.876825824063445*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"04182414-0670-45ce-9fb7-2ca1c1ab5da2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Text Treatment", "Subsection",
 CellChangeTimes->{{3.8390769726675463`*^9, 
  3.839076982357417*^9}},ExpressionUUID->"f8314751-4f16-4bbc-9d3e-\
8ff39a796ea4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "sentences", " ", "to", " ", "string", " ", "elements", 
    " ", 
    RowBox[{"in", " ", "'"}], 
    RowBox[{"sentences", "'"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Remove", " ", "commas", " ", 
    RowBox[{"from", " ", "'"}], 
    RowBox[{"sentences", "'"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Delete", " ", "empty", " ", "cases", " ", 
    RowBox[{"from", " ", "'"}], 
    RowBox[{"sentences", "'"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"sentences", "=", " ", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringDelete", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<,\>\"", ",", "\"\<\\\"\>\"", ",", "\"\<)\>\"", ",", 
            "\"\<(\>\"", ",", "\"\<-\>\"", ",", "\"\<\[LongDash]\>\"", ",", 
            "\"\<\[LongDash]\>\""}], "}"}]}], "]"}], "&"}], " ", "/@", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"innerText", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<\\n\>\"", ",", "\"\<.\>\""}], "}"}]}], "]"}]}], ",", 
      "\"\<\>\""}], "]"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.8390769869889917`*^9, 3.8390770257575006`*^9}, {
   3.83907718884715*^9, 3.839077194340781*^9}, {3.839077308987241*^9, 
   3.839077327271586*^9}, 3.839077366375617*^9, {3.8390774142752123`*^9, 
   3.8390774375424557`*^9}, {3.8390774900680933`*^9, 3.839077519206998*^9}, {
   3.839077570603879*^9, 3.8390776221324453`*^9}, {3.839325982364201*^9, 
   3.839325996776579*^9}, {3.839335174081868*^9, 3.839335204712453*^9}, {
   3.8393352799771347`*^9, 3.839335283360199*^9}, {3.839335326115222*^9, 
   3.839335327628187*^9}, {3.8393354840313*^9, 3.839335546816333*^9}, {
   3.83933566025875*^9, 3.839335664124052*^9}, {3.839335909854096*^9, 
   3.839335932299222*^9}, {3.83941151298038*^9, 3.839411521629798*^9}, {
   3.839672774594358*^9, 3.8396727859713507`*^9}, {3.839674406951083*^9, 
   3.8396744574022903`*^9}, {3.839674505968977*^9, 3.8396745533326406`*^9}, {
   3.839674667357984*^9, 3.8396747069284983`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"53c3031b-a021-40ff-a8ab-f0ea33918005"]
}, Open  ]],

Cell[CellGroupData[{

Cell["FeatureSpacePlot", "Subsection",
 CellChangeTimes->{{3.839076337743576*^9, 3.8390763475392637`*^9}, {
  3.839076422484026*^9, 3.839076426949189*^9}, {3.839077914633766*^9, 
  3.839077915668618*^9}},ExpressionUUID->"94cb2815-fc5a-4ac3-b622-\
56409b490701"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Feature", " ", "Space", " ", "Plot"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"FeatureSpacePlot", "[", 
   RowBox[{"sentences", ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "elmo"}], ",", 
    RowBox[{"LabelingFunction", "\[Rule]", "Callout"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8389005692037077`*^9, 3.8389005692112513`*^9}, {
   3.838900718979175*^9, 3.8389007629593887`*^9}, {3.8389008801704693`*^9, 
   3.8389008872147207`*^9}, {3.838900935038045*^9, 3.838900939659133*^9}, {
   3.838900972131154*^9, 3.8389010039997787`*^9}, {3.838911951770858*^9, 
   3.838911980786405*^9}, {3.8389120127810917`*^9, 3.8389121007027073`*^9}, {
   3.839076378948368*^9, 3.8390764195577803`*^9}, {3.839077761100174*^9, 
   3.839077774644298*^9}, {3.839077821899651*^9, 3.839077822947399*^9}, {
   3.839077931904958*^9, 3.8390779390561857`*^9}, {3.839078274387951*^9, 
   3.839078275339777*^9}, 3.839078353232251*^9, 3.839078898188999*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"f6eb3daa-8e27-4e5d-864a-cb73d4886681"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{102.15645599365234`, -313.7755432128906}, {
      27.923561096191406`, 
      1098.9981689453125`}, {-382.20428466796875`, -285.64569091796875`}, \
{-127.8822250366211, -525.2725219726562}, {
      419.77178955078125`, -179.49102783203125`}, {98.56690216064453, 
      163.01455688476562`}, {-97.42601013183594, 
      113.2840805053711}, {-88.73074340820312, -890.93359375}, \
{-312.730224609375, 1179.7276611328125`}, {
      376.0294189453125, -726.3880004882812}, {
      101.33489990234375`, -535.4112548828125}, {-116.80961608886719`, 
      901.89306640625}}]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}}, {{}, {{
      GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.82842712474619, 
            2.8284271247461903`}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-2.82842712474619, 
            2.8284271247461903`}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-4.242640687119285, 
            4.242640687119286}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-4.242640687119285, 
            4.242640687119286}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-5.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-7.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-9.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-9.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.82842712474619, 
            2.8284271247461903`}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-2.82842712474619, 
            2.8284271247461903`}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-4.242640687119285, 
            4.242640687119286}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-4.242640687119285, 
            4.242640687119286}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-5.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-7.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-9.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-9.65685424949238, 
            5.656854249492381}, {-121.05486034319317`, 912.8540702036637}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.656854249492383, 
            13.456854249492388`}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-9.656854249492383, 
            0.4568542494923866}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-66.65685424949238, 
            0.4568542494923742}, {-121.05486034319317`, 912.8540702036637}], 
           Offset[{-66.65685424949238, 
            13.456854249492373`}, {-121.05486034319317`, 
            912.8540702036637}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-38.15685424949238, 6.95685424949238}, \
{-121.05486034319317, 912.8540702036637}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{101.33489990234375`, -535.4112548828125}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
             Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
             FrameMargins -> 2, BaselinePosition -> Automatic, StripOnInput -> 
             False], FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, {LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
              Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
              FrameMargins -> 2, BaselinePosition -> Automatic}], 
            FrameMargins -> 0], {}], "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.82842712474619, 2.8284271247461903`}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-2.82842712474619, 2.8284271247461903`}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.82842712474619, 2.8284271247461903`}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-2.82842712474619, 2.8284271247461903`}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            371.7841746909865, -715.4269966908676}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.656854249492383, 14.656854249492396`}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-9.656854249492383, -0.3431457505076043}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-153.65685424949237`, -0.3431457505076363}, {
            371.7841746909865, -715.4269966908676}], 
           Offset[{-153.65685424949237`, 14.656854249492364`}, {
            371.7841746909865, -715.4269966908676}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"James Webb Space Telescope\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-81.65685424949238, 7.15685424949238}, \
{371.7841746909865, -715.4269966908676}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-308.484980355049,
             1190.6886649302262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-308.484980355049,
             1190.6886649302262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-308.484980355049, 
            1190.6886649302262`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 13.456854249492386`}, {-308.484980355049,
             1190.6886649302262`}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-308.484980355049, 1190.6886649302262`}], 
           Offset[{9.656854249492383, 0.4568542494923733}, {-308.484980355049,
             1190.6886649302262`}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-308.484980355049, 
            1190.6886649302262`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-308.484980355049, 1190.6886649302262}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{4., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{6., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{6., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{8., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{10., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{12., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{12., 0.}, {-82.72706140814887, -890.93359375}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{4., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{6., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{6., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{8., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{10., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{12., 0.}, {-82.72706140814887, -890.93359375}], 
           Offset[{12., 0.}, {-82.72706140814887, -890.93359375}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{138., 
            7.500000000000014}, {-82.72706140814887, -890.93359375}], 
           Offset[{138., -7.499999999999986}, {-82.72706140814887, \
-890.93359375}], 
           Offset[{12., -7.500000000000014}, {-82.72706140814887, \
-890.93359375}], 
           Offset[{12., 
            7.499999999999986}, {-82.72706140814887, -890.93359375}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Technology and Innovation\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{75., 0.}, {-82.72706140814887, -890.93359375}], {0, 0}]}], 
      GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{4.242640687119285, -4.242640687119286}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{4.242640687119285, -4.242640687119286}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{
            5.65685424949238, -5.6568542494923815`}, {-93.18076587750996, 
            102.32307670795736`}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{4.242640687119285, -4.242640687119286}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{4.242640687119285, -4.242640687119286}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, \
{-93.18076587750996, 102.32307670795736`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{129.65685424949237`, 
            0.34314575050763185`}, {-93.18076587750996, 102.32307670795736`}],
            Offset[{
            129.65685424949237`, -14.656854249492369`}, {-93.18076587750996, 
            102.32307670795736`}], 
           Offset[{9.656854249492383, -14.656854249492394`}, \
{-93.18076587750996, 102.32307670795736`}], 
           Offset[{9.656854249492383, 
            0.3431457505076052}, {-93.18076587750996, 
            102.32307670795736`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\" For us it's a starting point\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{69.65685424949238, -7.1568542494923815}, \
{-93.18076587750996, 102.32307670795736}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 8.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 10.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 12.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 12.}, {98.56690216064453, 
            178.5157571122911}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 8.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 10.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 12.}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{4.898587196589413*^-16, 12.}, {98.56690216064453, 
            178.5157571122911}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{111., 27.000000000000025`}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{111., 12.000000000000025`}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{-111., 11.999999999999975`}, {98.56690216064453, 
            178.5157571122911}], 
           Offset[{-111., 26.999999999999975`}, {98.56690216064453, 
            178.5157571122911}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          
          RotationBox["\<\"For some the word 'impossible' ends \
discussions\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{98.56690216064453, 178.5157571122911}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.82842712474619, 2.8284271247461903`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-2.82842712474619, 2.8284271247461903`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.82842712474619, 2.8284271247461903`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-2.82842712474619, 2.8284271247461903`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-4.242640687119285, 4.242640687119286}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            415.52654529645525`, -168.53002403461753`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.65685424949238, 13.456854249492384`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-9.65685424949238, 0.45685424949238485`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-48.65685424949238, 0.45685424949237596`}, {
            415.52654529645525`, -168.53002403461753`}], 
           Offset[{-48.65685424949238, 13.456854249492377`}, {
            415.52654529645525`, -168.53002403461753`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Join Us\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-29.15685424949238, 6.95685424949238}, \
{415.52654529645525, -168.53002403461753}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{-127.8822250366211, -525.2725219726562}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Northrop Grumman Recognized for our Legendary Company \
Culture\"", LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Northrop Grumman Recognized for our Legendary Company Culture", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 
            2.82842712474619}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{4.242640687119286, 
            4.242640687119285}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{4.242640687119286, 
            4.242640687119285}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{5.656854249492381, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{7.65685424949238, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{9.65685424949238, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{9.65685424949238, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}]}]}, \

        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 
            2.82842712474619}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{4.242640687119286, 
            4.242640687119285}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{4.242640687119286, 
            4.242640687119285}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{5.656854249492381, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{7.65685424949238, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{9.65685424949238, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{9.65685424949238, 
            5.65685424949238}, {-377.95904041364275`, -274.684687120555}]}]}, \

        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{198.65685424949237`, 
            14.656854249492401`}, {-377.95904041364275`, -274.684687120555}], 
           Offset[{198.65685424949237`, -0.343145750507599}, \
{-377.95904041364275`, -274.684687120555}], 
           Offset[{9.656854249492383, -0.3431457505076416}, \
{-377.95904041364275`, -274.684687120555}], 
           Offset[{9.656854249492383, 
            14.656854249492358`}, {-377.95904041364275`, \
-274.684687120555}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          
          RotationBox["\<\"Forbes 2022 World\[CloseCurlyQuote]s Best \
Employers List\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{104.15685424949238, 7.15685424949238}, \
{-377.95904041364275, -274.684687120555}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {32.16880535051738,
             1109.9591727427262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{5.656854249492381, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{7.65685424949238, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {32.16880535051738,
             1109.9591727427262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{4.242640687119286, 4.242640687119285}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{5.656854249492381, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{7.65685424949238, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}], 
           Offset[{9.65685424949238, 5.65685424949238}, {32.16880535051738, 
            1109.9591727427262`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 13.456854249492386`}, {32.16880535051738,
             1109.9591727427262`}], 
           Offset[{66.65685424949238, 0.45685424949238573`}, {
            32.16880535051738, 1109.9591727427262`}], 
           Offset[{9.656854249492383, 0.4568542494923733}, {32.16880535051738,
             1109.9591727427262`}], 
           Offset[{9.656854249492383, 13.456854249492373`}, {
            32.16880535051738, 1109.9591727427262`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{32.16880535051738, 1109.9591727427262}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            97.91121173932636, -324.7365470103044}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.656854249492383, 0.34314575050763985`}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-9.656854249492383, -14.65685424949236}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-183.65685424949237`, -14.6568542494924}, {
            97.91121173932636, -324.7365470103044}], 
           Offset[{-183.65685424949237`, 0.34314575050760077`}, {
            97.91121173932636, -324.7365470103044}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-96.65685424949238, -7.15685424949238}, \
{97.91121173932636, -324.7365470103044}], {0, 0}]}]}, {}}}},
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{666.7249145507812, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->All,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.839672743592372*^9, 3.8396728028388777`*^9, 
  3.83967452927247*^9, 3.8396747223392763`*^9, 3.839684798687475*^9, 
  3.839686171069064*^9, 3.876825826474125*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"52316ca3-2786-44b7-b0eb-9c5e310ee6de"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ColorNet", "Subsection",
 CellChangeTimes->{{3.839076451389428*^9, 
  3.839076452331965*^9}},ExpressionUUID->"d693ba3d-1d70-4699-bf83-\
a14d53d9b3e6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dr", "=", 
   RowBox[{"DimensionReduction", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"elmo", "[", "sentences", "]"}], ",", "1"}], "]"}], ",", "3"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colorNet", "=", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{"elmo", ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Function\>\"", ",", 
         RowBox[{"Function", "[", 
          RowBox[{"Map", "[", 
           RowBox[{"RGBColor", ",", 
            RowBox[{"0.8", "*", 
             RowBox[{"LogisticSigmoid", "[", 
              RowBox[{"dr", "[", "#", "]"}], "]"}]}]}], "]"}], "]"}]}], "}"}],
        "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colorNet", "[", "\"\<The cat is on the mat\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"wordContextColor", "[", "sentence_", "]"}], ":=", 
   RowBox[{"Row", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "#2", ",", "Bold"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringSplit", "[", "sentence", "]"}], ",", 
         RowBox[{"colorNet", "[", "sentence", "]"}]}], "}"}]}], "]"}], ",", 
     "\"\<  \>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"wordContextColor", "/@", "sentences"}], "//", 
  "TableForm"}]}], "Input",
 CellChangeTimes->{{3.8389006101770372`*^9, 3.83890061018789*^9}, {
  3.838900667026085*^9, 3.8389006933490677`*^9}, {3.839674604289896*^9, 
  3.839674618023143*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"548d161b-8318-41dc-989e-f6c293bfedec"],

Cell[BoxData[
 TemplateBox[{
  "NetDecoder","extfwarn",
   "\"Specified function \\!\\(\\*RowBox[{RowBox[{\\\"Map\\\", \\\"[\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\
\\\"}], \\\"&\\\"}]\\) appears to require definitions of external symbols \
(\\!\\(\\*TemplateBox[List[\\\", \\\", \\\"\\\\\\\", \\\\\\\"\\\", \
\\\"dr\\\"], \\\"RowWithSeparators\\\"]\\)). Be aware that the definitions \
and values of these symbols will not be retained if the net is saved using \
Export, Put, or DumpSave.\"",2,32,57,18963412405167383777,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.839672743807976*^9, {3.839674607542835*^9, 3.8396746212422543`*^9}, 
   3.839674724466209*^9, 3.839684800196932*^9, 3.8396861724720573`*^9, 
   3.8768258273580837`*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"b899fedb-50ac-4e86-b950-9020ae64564b"],

Cell[BoxData[
 TemplateBox[{
  "MapThread","mptc",
   "\"Incompatible dimensions of objects at positions {2, \\!\\(\\*RowBox[{\\\
\"1\\\"}]\\)} and {2, \\!\\(\\*RowBox[{\\\"2\\\"}]\\)} of \\!\\(\\*RowBox[{\\\
\"MapThread\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"Style\\\", \\\"[\\\", \
RowBox[{\\\"#1\\\", \\\",\\\", \\\"#2\\\", \\\",\\\", \\\"Bold\\\"}], \\\"]\\\
\"}], \\\"&\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"ESPAStar\[Trademark]:\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"A\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Freight\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Train\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"to\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Space\\\\\\\"\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", \
RowBox[{InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[\
GrayLevel[0], RectangleBox[List[0, 0]]], List[GrayLevel[0], \
RectangleBox[List[1, -1]]], List[RGBColor[List[0.7911014354025748`, \
0.39185821308087143`, 0.7808698589952723`]], RectangleBox[List[0, -1], \
List[2, 1]]]], Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], \
Rule[AspectRatio, 1], Rule[Frame, True], Rule[FrameStyle, \
RGBColor[0.52740095693505`, 0.261238808720581`, 0.5205799059968482`]], \
Rule[FrameTicks, None], Rule[PlotRangePadding, None], Rule[ImageSize, \
Dynamic[List[Automatic, Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7911014354025748`\\\", \\\",\\\", \
\\\"0.39185821308087143`\\\", \\\",\\\", \\\"0.7808698589952723`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7911014354025748`, 0.39185821308087143`, 0.7808698589952723`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7911014354025748`, 0.39185821308087143`, \
0.7808698589952723`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.2500484561198279`, 0.4449188011083802`, \
0.7885232989975406`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.16669897074655193`, \
0.2966125340722535`, 0.5256821993316938`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.2500484561198279`\\\", \\\",\\\", \\\"0.4449188011083802`\\\
\", \\\",\\\", \\\"0.7885232989975406`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.2500484561198279`, 0.4449188011083802`, 0.7885232989975406`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.2500484561198279`, 0.4449188011083802`, \
0.7885232989975406`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.03441881901284771`, 0.34132449516044067`, \
0.13386187488776116`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.022945879341898477`, \
0.2275496634402938`, 0.08924124992517411`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.03441881901284771`\\\", \\\",\\\", \\\"0.34132449516044067`\
\\\", \\\",\\\", \\\"0.13386187488776116`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.03441881901284771`, 0.34132449516044067`, 0.13386187488776116`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.03441881901284771`, 0.34132449516044067`, \
0.13386187488776116`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.11280925967055798`, 0.07656255558464313`, \
0.05151351074020641`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.07520617311370532`, \
0.051041703723095425`, 0.034342340493470944`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.11280925967055798`\\\", \\\",\\\", \\\"0.07656255558464313`\
\\\", \\\",\\\", \\\"0.05151351074020641`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.11280925967055798`, 0.07656255558464313`, 0.05151351074020641`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.11280925967055798`, 0.07656255558464313`, \
0.05151351074020641`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7998628510069277`, 0.04182145732759546`, \
0.005247509464269607`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5332419006712852`, \
0.027880971551730305`, 0.003498339642846405`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7998628510069277`\\\", \\\",\\\", \
\\\"0.04182145732759546`\\\", \\\",\\\", \\\"0.005247509464269607`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7998628510069277`, 0.04182145732759546`, 0.005247509464269607`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7998628510069277`, 0.04182145732759546`, \
0.005247509464269607`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7996523815294846`, 0.03273875837727771`, \
0.000170687017017015`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5331015876863231`, \
0.02182583891818514`, 0.00011379134467801`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7996523815294846`\\\", \\\",\\\", \
\\\"0.03273875837727771`\\\", \\\",\\\", \\\"0.000170687017017015`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7996523815294846`, 0.03273875837727771`, 0.000170687017017015`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7996523815294846`, 0.03273875837727771`, \
0.000170687017017015`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.03209862090290816`, 0.05733930728670464`, \
0.0002909177381500688`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.021399080601938774`, \
0.03822620485780309`, 0.00019394515876671256`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.03209862090290816`\\\", \\\",\\\", \\\"0.05733930728670464`\
\\\", \\\",\\\", \\\"0.0002909177381500688`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.03209862090290816`, 0.05733930728670464`, \
0.0002909177381500688`]], Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, \
True], MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.03209862090290816`, 0.05733930728670464`, \
0.0002909177381500688`]], Rule[Editable, False], Rule[Selectable, False]], \\\
\",\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[\
GrayLevel[0], RectangleBox[List[0, 0]]], List[GrayLevel[0], \
RectangleBox[List[1, -1]]], List[RGBColor[List[0.7999705102404953`, \
0.09609474328898047`, 0.008930038662587179`]], RectangleBox[List[0, -1], \
List[2, 1]]]], Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], \
Rule[AspectRatio, 1], Rule[Frame, True], Rule[FrameStyle, \
RGBColor[0.5333136734936635`, 0.06406316219265365`, 0.005953359108391453`]], \
Rule[FrameTicks, None], Rule[PlotRangePadding, None], Rule[ImageSize, \
Dynamic[List[Automatic, Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7999705102404953`\\\", \\\",\\\", \
\\\"0.09609474328898047`\\\", \\\",\\\", \\\"0.008930038662587179`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7999705102404953`, 0.09609474328898047`, 0.008930038662587179`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7999705102404953`, 0.09609474328898047`, \
0.008930038662587179`]], Rule[Editable, False], Rule[Selectable, False]]}], \
\\\"}\\\"}]}], \\\"}\\\"}]}], \\\"]\\\"}]\\); dimensions are \
\\!\\(\\*RowBox[{\\\"6\\\"}]\\) and \\!\\(\\*RowBox[{\\\"8\\\"}]\\).\"",2,35,
   58,18963412405167383777,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.839672743807976*^9, {3.839674607542835*^9, 3.8396746212422543`*^9}, 
   3.839674724466209*^9, 3.839684800196932*^9, 3.8396861724720573`*^9, 
   3.876825828197373*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"700ae9ec-f11f-4046-93ea-ecdf4e0505aa"],

Cell[BoxData[
 TemplateBox[{
  "MapThread","mptc",
   "\"Incompatible dimensions of objects at positions {2, \\!\\(\\*RowBox[{\\\
\"1\\\"}]\\)} and {2, \\!\\(\\*RowBox[{\\\"2\\\"}]\\)} of \\!\\(\\*RowBox[{\\\
\"MapThread\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"Style\\\", \\\"[\\\", \
RowBox[{\\\"#1\\\", \\\",\\\", \\\"#2\\\", \\\",\\\", \\\"Bold\\\"}], \\\"]\\\
\"}], \\\"&\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"Forbes\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"2022\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"World\[CloseCurlyQuote]s\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Best\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Employers\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"List\\\\\\\"\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\
\"{\\\", RowBox[{InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[\
GrayLevel[0], RectangleBox[List[0, 0]]], List[GrayLevel[0], \
RectangleBox[List[1, -1]]], List[RGBColor[List[0.799939723700401`, \
0.4115098533722974`, 0.7999999976271822`]], RectangleBox[List[0, -1], List[2, \
1]]]], Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, \
1], Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5332931491336007`, \
0.27433990224819826`, 0.5333333317514548`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.799939723700401`\\\", \\\",\\\", \
\\\"0.4115098533722974`\\\", \\\",\\\", \\\"0.7999999976271822`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, RGBColor[0.799939723700401`, \
0.4115098533722974`, 0.7999999976271822`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.799939723700401`, 0.4115098533722974`, 0.7999999976271822`]], \
Rule[Editable, False], Rule[Selectable, False]], \\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7970333878860036`, 0.6123653810284191`, \
0.7999999935772348`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5313555919240025`, \
0.4082435873522794`, 0.5333333290514899`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7970333878860036`\\\", \\\",\\\", \\\"0.6123653810284191`\\\
\", \\\",\\\", \\\"0.7999999935772348`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7970333878860036`, 0.6123653810284191`, 0.7999999935772348`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7970333878860036`, 0.6123653810284191`, \
0.7999999935772348`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7999078157887145`, 0.02933445892909245`, \
0.7999999994817986`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5332718771924764`, \
0.019556305952728302`, 0.5333333329878658`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7999078157887145`\\\", \\\",\\\", \
\\\"0.02933445892909245`\\\", \\\",\\\", \\\"0.7999999994817986`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7999078157887145`, 0.02933445892909245`, 0.7999999994817986`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7999078157887145`, 0.02933445892909245`, \
0.7999999994817986`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.6767237531215592`, 0.6659562669287514`, \
0.7999999946157313`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.45114916874770616`, \
0.44397084461916764`, 0.533333329743821`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.6767237531215592`\\\", \\\",\\\", \\\"0.6659562669287514`\\\
\", \\\",\\\", \\\"0.7999999946157313`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.6767237531215592`, 0.6659562669287514`, 0.7999999946157313`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.6767237531215592`, 0.6659562669287514`, \
0.7999999946157313`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.24781475026047417`, 0.7874538309008923`, \
0.7999999999753972`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.1652098335069828`, \
0.5249692206005949`, 0.5333333333169314`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.24781475026047417`\\\", \\\",\\\", \
\\\"0.7874538309008923`\\\", \\\",\\\", \\\"0.7999999999753972`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.24781475026047417`, 0.7874538309008923`, 0.7999999999753972`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.24781475026047417`, 0.7874538309008923`, \
0.7999999999753972`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7999198779956775`, 0.00824549378736261`, \
0.7999999847727142`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5332799186637851`, \
0.005496995858241741`, 0.5333333231818095`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7999198779956775`\\\", \\\",\\\", \
\\\"0.00824549378736261`\\\", \\\",\\\", \\\"0.7999999847727142`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7999198779956775`, 0.00824549378736261`, 0.7999999847727142`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7999198779956775`, 0.00824549378736261`, \
0.7999999847727142`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7998964853879315`, 0.0007086747159844357`, \
0.799992611278036`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5332643235919543`, \
0.00047244981065629047`, 0.5333284075186907`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7998964853879315`\\\", \\\",\\\", \
\\\"0.0007086747159844357`\\\", \\\",\\\", \\\"0.799992611278036`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7998964853879315`, 0.0007086747159844357`, 0.799992611278036`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7998964853879315`, 0.0007086747159844357`, \
0.799992611278036`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.7757703054981988`, 0.007839446474197483`, \
0.799898331053707`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.5171802036654659`, \
0.005226297649464989`, 0.5332655540358047`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.7757703054981988`\\\", \\\",\\\", \\\"0.007839446474197483`\
\\\", \\\",\\\", \\\"0.799898331053707`\\\"]], \\\"}\\\"]], \\\"]\\\"]], \
Rule[NumberMarks, False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.7757703054981988`, 0.007839446474197483`, 0.799898331053707`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.7757703054981988`, 0.007839446474197483`, \
0.799898331053707`]], Rule[Editable, False], Rule[Selectable, False]]}], \
\\\"}\\\"}]}], \\\"}\\\"}]}], \\\"]\\\"}]\\); dimensions are \
\\!\\(\\*RowBox[{\\\"6\\\"}]\\) and \\!\\(\\*RowBox[{\\\"8\\\"}]\\).\"",2,35,
   59,18963412405167383777,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.839672743807976*^9, {3.839674607542835*^9, 3.8396746212422543`*^9}, 
   3.839674724466209*^9, 3.839684800196932*^9, 3.8396861724720573`*^9, 
   3.876825828478497*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"729fd982-a3b8-463f-ad53-bf79c567e17f"],

Cell[BoxData[
 TemplateBox[{
  "MapThread","mptc",
   "\"Incompatible dimensions of objects at positions {2, \\!\\(\\*RowBox[{\\\
\"1\\\"}]\\)} and {2, \\!\\(\\*RowBox[{\\\"2\\\"}]\\)} of \\!\\(\\*RowBox[{\\\
\"MapThread\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"Style\\\", \\\"[\\\", \
RowBox[{\\\"#1\\\", \\\",\\\", \\\"#2\\\", \\\",\\\", \\\"Bold\\\"}], \\\"]\\\
\"}], \\\"&\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"For\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"some\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"the\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"word\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"'impossible'\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"ends\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"discussions\\\\\\\"\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", \
RowBox[{InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[\
GrayLevel[0], RectangleBox[List[0, 0]]], List[GrayLevel[0], \
RectangleBox[List[1, -1]]], List[RGBColor[List[0.000019410541220258543`, \
0.2918543502313721`, 0.35857070544793324`]], RectangleBox[List[0, -1], \
List[2, 1]]]], Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], \
Rule[AspectRatio, 1], Rule[Frame, True], Rule[FrameStyle, \
RGBColor[0.000012940360813505695`, 0.19456956682091472`, \
0.23904713696528884`]], Rule[FrameTicks, None], Rule[PlotRangePadding, None], \
Rule[ImageSize, Dynamic[List[Automatic, Times[1.35`, \
CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.000019410541220258543`\\\", \\\",\\\", \
\\\"0.2918543502313721`\\\", \\\",\\\", \\\"0.35857070544793324`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.000019410541220258543`, 0.2918543502313721`, \
0.35857070544793324`]], Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, \
True], MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.000019410541220258543`, 0.2918543502313721`, \
0.35857070544793324`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[1.077453830594427`*^-6, 0.7928305643315516`, \
0.06400978543348855`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[7.183025537296181`*^-7, \
0.5285537095543678`, 0.04267319028899237`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"1.077453830594427`*^-6\\\", \\\",\\\", \
\\\"0.7928305643315516`\\\", \\\",\\\", \\\"0.06400978543348855`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[1.077453830594427`*^-6, 0.7928305643315516`, 0.06400978543348855`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[1.077453830594427`*^-6, 0.7928305643315516`, \
0.06400978543348855`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[3.595087362419492`*^-6, 0.7989200099278535`, \
0.015494296150061267`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[2.3967249082796615`*^-6, \
0.5326133399519024`, 0.010329530766707512`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"3.595087362419492`*^-6\\\", \\\",\\\", \
\\\"0.7989200099278535`\\\", \\\",\\\", \\\"0.015494296150061267`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[3.595087362419492`*^-6, 0.7989200099278535`, \
0.015494296150061267`]], Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, \
True], MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[3.595087362419492`*^-6, 0.7989200099278535`, \
0.015494296150061267`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[7.427703683022987`*^-7, 0.7995714255782655`, \
0.7008406291990777`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[4.951802455348659`*^-7, \
0.5330476170521771`, 0.4672270861327185`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"7.427703683022987`*^-7\\\", \\\",\\\", \
\\\"0.7995714255782655`\\\", \\\",\\\", \\\"0.7008406291990777`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[7.427703683022987`*^-7, 0.7995714255782655`, 0.7008406291990777`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[7.427703683022987`*^-7, 0.7995714255782655`, \
0.7008406291990777`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[8.264703424576736`*^-7, 0.7994355163236397`, \
0.37833505649698806`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[5.509802283051158`*^-7, \
0.5329570108824265`, 0.2522233709979921`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"8.264703424576736`*^-7\\\", \\\",\\\", \
\\\"0.7994355163236397`\\\", \\\",\\\", \\\"0.37833505649698806`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[8.264703424576736`*^-7, 0.7994355163236397`, 0.37833505649698806`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[8.264703424576736`*^-7, 0.7994355163236397`, \
0.37833505649698806`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.000015527992573922595`, 0.7997755047608666`, \
0.7677911845906993`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.00001035199504928173`, \
0.5331836698405777`, 0.5118607897271329`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.000015527992573922595`\\\", \\\",\\\", \
\\\"0.7997755047608666`\\\", \\\",\\\", \\\"0.7677911845906993`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.000015527992573922595`, 0.7997755047608666`, \
0.7677911845906993`]], Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, \
True], MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.000015527992573922595`, 0.7997755047608666`, \
0.7677911845906993`]], Rule[Editable, False], Rule[Selectable, False]], \\\",\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.000016134424098528246`, 0.7989194415271936`, \
0.45801751306844096`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.000010756282732352165`, \
0.5326129610181292`, 0.305345008712294`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.000016134424098528246`\\\", \\\",\\\", \
\\\"0.7989194415271936`\\\", \\\",\\\", \\\"0.45801751306844096`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.000016134424098528246`, 0.7989194415271936`, \
0.45801751306844096`]], Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, \
True], MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.000016134424098528246`, 0.7989194415271936`, \
0.45801751306844096`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[1.213915445014968`*^-6, 0.7983192502789108`, \
0.19896242352177926`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[8.092769633433121`*^-7, \
0.532212833519274`, 0.13264161568118618`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"1.213915445014968`*^-6\\\", \\\",\\\", \
\\\"0.7983192502789108`\\\", \\\",\\\", \\\"0.19896242352177926`\\\"]], \\\"}\
\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[1.213915445014968`*^-6, 0.7983192502789108`, 0.19896242352177926`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[1.213915445014968`*^-6, 0.7983192502789108`, \
0.19896242352177926`]], Rule[Editable, False], Rule[Selectable, False]], \
\\\",\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[RGBColor[List[0.00042390009947014003`, 0.7273459598110055`, \
0.4081761714529384`]], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, RGBColor[0.0002826000663134267`, \
0.4848973065406703`, 0.2721174476352923`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
StyleBox[RowBox[List[\\\"RGBColor\\\", \\\"[\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"0.00042390009947014003`\\\", \\\",\\\", \
\\\"0.7273459598110055`\\\", \\\",\\\", \\\"0.4081761714529384`\\\"]], \
\\\"}\\\"]], \\\"]\\\"]], Rule[NumberMarks, False]]], Rule[Appearance, None], \
Rule[BaseStyle, List[]], Rule[BaselinePosition, Baseline], \
Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, \
RGBColor[0.00042390009947014003`, 0.7273459598110055`, 0.4081761714529384`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"RGBColorValueSelector\\\"], List[0, List[Left, Bottom]], \
List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], \
RGBColor[List[0.00042390009947014003`, 0.7273459598110055`, \
0.4081761714529384`]], Rule[Editable, False], Rule[Selectable, False]]}], \
\\\"}\\\"}]}], \\\"}\\\"}]}], \\\"]\\\"}]\\); dimensions are \
\\!\\(\\*RowBox[{\\\"7\\\"}]\\) and \\!\\(\\*RowBox[{\\\"9\\\"}]\\).\"",2,35,
   60,18963412405167383777,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.839672743807976*^9, {3.839674607542835*^9, 3.8396746212422543`*^9}, 
   3.839674724466209*^9, 3.839684800196932*^9, 3.8396861724720573`*^9, 
   3.876825828981956*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"56fa9df7-04ef-46ed-8250-4fcf910c3c1a"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"MapThread\\\", \\\"::\\\
\", \\\"mptc\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,35,61,18963412405167383777,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.839672743807976*^9, {3.839674607542835*^9, 3.8396746212422543`*^9}, 
   3.839674724466209*^9, 3.839684800196932*^9, 3.8396861724720573`*^9, 
   3.8768258292630033`*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"bebfb9b7-de88-4007-a323-361766ea624f"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"Row", "[", 
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#1", ",", "#2", ",", "Bold"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"ESPAStar\[Trademark]:\"\>", ",", "\<\"A\"\>", 
              ",", "\<\"Freight\"\>", ",", "\<\"Train\"\>", ",", "\<\"to\"\>",
               ",", "\<\"Space\"\>"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7911014354025748, 0.39185821308087143`, 
                    0.7808698589952723], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.52740095693505, 0.261238808720581, 0.5205799059968482],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7911014354025748`", ",", "0.39185821308087143`", ",", 
                    "0.7808698589952723`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7911014354025748, 0.39185821308087143`, 
                    0.7808698589952723]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7911014354025748, 0.39185821308087143`, 
                0.7808698589952723}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.2500484561198279, 0.4449188011083802, 
                    0.7885232989975406], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.16669897074655193`, 0.2966125340722535, 
                    0.5256821993316938],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.2500484561198279`", ",", "0.4449188011083802`", ",", 
                    "0.7885232989975406`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.2500484561198279, 0.4449188011083802, 
                    0.7885232989975406]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.2500484561198279, 0.4449188011083802, 
                0.7885232989975406}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.03441881901284771, 0.34132449516044067`, 
                    0.13386187488776116`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.022945879341898477`, 0.2275496634402938, 
                    0.08924124992517411],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.03441881901284771`", ",", "0.34132449516044067`", ",", 
                    "0.13386187488776116`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.03441881901284771, 0.34132449516044067`, 
                    0.13386187488776116`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.03441881901284771, 0.34132449516044067`, 
                0.13386187488776116`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.11280925967055798`, 0.07656255558464313, 
                    0.05151351074020641], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.07520617311370532, 0.051041703723095425`, 
                    0.034342340493470944`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.11280925967055798`", ",", "0.07656255558464313`", ",", 
                    "0.05151351074020641`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.11280925967055798`, 0.07656255558464313, 
                    0.05151351074020641]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.11280925967055798`, 0.07656255558464313, 
                0.05151351074020641}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7998628510069277, 0.04182145732759546, 
                    0.005247509464269607], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5332419006712852, 0.027880971551730305`, 
                    0.003498339642846405],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7998628510069277`", ",", "0.04182145732759546`", ",", 
                    "0.005247509464269607`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7998628510069277, 0.04182145732759546, 
                    0.005247509464269607]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7998628510069277, 0.04182145732759546, 
                0.005247509464269607}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7996523815294846, 0.03273875837727771, 
                    0.000170687017017015], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5331015876863231, 0.02182583891818514, 
                    0.00011379134467801],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7996523815294846`", ",", "0.03273875837727771`", ",", 
                    "0.000170687017017015`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7996523815294846, 0.03273875837727771, 
                    0.000170687017017015]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7996523815294846, 0.03273875837727771, 
                0.000170687017017015}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.03209862090290816, 0.05733930728670464, 
                    0.0002909177381500688], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.021399080601938774`, 0.03822620485780309, 
                    0.00019394515876671256`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.03209862090290816`", ",", "0.05733930728670464`", ",", 
                    "0.0002909177381500688`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.03209862090290816, 0.05733930728670464, 
                    0.0002909177381500688]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.03209862090290816, 0.05733930728670464, 
                0.0002909177381500688}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7999705102404953, 0.09609474328898047, 
                    0.008930038662587179], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5333136734936635, 0.06406316219265365, 
                    0.005953359108391453],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7999705102404953`", ",", "0.09609474328898047`", ",", 
                    "0.008930038662587179`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7999705102404953, 0.09609474328898047, 
                    0.008930038662587179]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7999705102404953, 0.09609474328898047, 
                0.008930038662587179}],
               Editable->False,
               Selectable->False]}], "}"}]}], "}"}]}], "]"}], 
        ",", "\<\"  \"\>"}], "]"}]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"Learn\"", 
         RGBColor[{0.00033146401247961593`, 5.757209051394287*^-10, 
          0.016011526276251326`}], Bold, StripOnInput -> False],StyleBox[
        "\"More\"", 
         RGBColor[{0.4735589344316388, 1.8534636422715442`*^-8, 
          0.5543265989641329}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      RowBox[{"Row", "[", 
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#1", ",", "#2", ",", "Bold"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"Forbes\"\>", ",", "\<\"2022\"\>", 
              ",", "\<\"World\[CloseCurlyQuote]s\"\>", ",", "\<\"Best\"\>", 
              ",", "\<\"Employers\"\>", ",", "\<\"List\"\>"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.799939723700401, 0.4115098533722974, 
                    0.7999999976271822], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5332931491336007, 0.27433990224819826`, 
                    0.5333333317514548],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.799939723700401`", ",", "0.4115098533722974`", ",", 
                    "0.7999999976271822`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.799939723700401, 0.4115098533722974, 
                    0.7999999976271822]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.799939723700401, 0.4115098533722974, 
                0.7999999976271822}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7970333878860036, 0.6123653810284191, 
                    0.7999999935772348], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5313555919240025, 0.4082435873522794, 0.5333333290514899],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7970333878860036`", ",", "0.6123653810284191`", ",", 
                    "0.7999999935772348`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7970333878860036, 0.6123653810284191, 
                    0.7999999935772348]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7970333878860036, 0.6123653810284191, 
                0.7999999935772348}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7999078157887145, 0.02933445892909245, 
                    0.7999999994817986], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5332718771924764, 0.019556305952728302`, 
                    0.5333333329878658],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7999078157887145`", ",", "0.02933445892909245`", ",", 
                    "0.7999999994817986`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7999078157887145, 0.02933445892909245, 
                    0.7999999994817986]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7999078157887145, 0.02933445892909245, 
                0.7999999994817986}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.6767237531215592, 0.6659562669287514, 
                    0.7999999946157313], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.45114916874770616`, 0.44397084461916764`, 
                    0.533333329743821],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.6767237531215592`", ",", "0.6659562669287514`", ",", 
                    "0.7999999946157313`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.6767237531215592, 0.6659562669287514, 
                    0.7999999946157313]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.6767237531215592, 0.6659562669287514, 
                0.7999999946157313}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.24781475026047417`, 0.7874538309008923, 
                    0.7999999999753972], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.1652098335069828, 0.5249692206005949, 0.5333333333169314],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.24781475026047417`", ",", "0.7874538309008923`", ",", 
                    "0.7999999999753972`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.24781475026047417`, 0.7874538309008923, 
                    0.7999999999753972]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.24781475026047417`, 0.7874538309008923, 
                0.7999999999753972}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7999198779956775, 0.00824549378736261, 
                    0.7999999847727142], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5332799186637851, 0.005496995858241741, 
                    0.5333333231818095],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7999198779956775`", ",", "0.00824549378736261`", ",", 
                    "0.7999999847727142`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7999198779956775, 0.00824549378736261, 
                    0.7999999847727142]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7999198779956775, 0.00824549378736261, 
                0.7999999847727142}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7998964853879315, 0.0007086747159844357, 
                    0.799992611278036], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5332643235919543, 0.00047244981065629047`, 
                    0.5333284075186907],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7998964853879315`", ",", "0.0007086747159844357`", ",",
                     "0.799992611278036`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7998964853879315, 0.0007086747159844357, 
                    0.799992611278036]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7998964853879315, 0.0007086747159844357, 
                0.799992611278036}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.7757703054981988, 0.007839446474197483, 
                    0.799898331053707], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.5171802036654659, 0.005226297649464989, 
                    0.5332655540358047],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.7757703054981988`", ",", "0.007839446474197483`", ",", 
                    "0.799898331053707`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7757703054981988, 0.007839446474197483, 
                    0.799898331053707]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.7757703054981988, 0.007839446474197483, 
                0.799898331053707}],
               Editable->False,
               Selectable->False]}], "}"}]}], "}"}]}], "]"}], 
        ",", "\<\"  \"\>"}], "]"}]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"Northrop\"", 
         RGBColor[{0.7999941475122262, 0.7999981385002741, 
          0.07362680095822649}], Bold, StripOnInput -> False],StyleBox[
        "\"Grumman\"", 
         RGBColor[{0.7999998914974707, 0.7999976060892555, 
          0.05675374789840766}], Bold, StripOnInput -> False],StyleBox[
        "\"Recognized\"", 
         RGBColor[{0.7979521845450688, 0.013094684796098759`, 
          0.014220873569654522`}], Bold, StripOnInput -> False],StyleBox[
        "\"for\"", 
         RGBColor[{0.07646385075659277, 0.7670970163199516, 
          0.0012781707447587854`}], Bold, StripOnInput -> False],StyleBox[
        "\"our\"", 
         RGBColor[{0.12956790941779497`, 0.6725521807158779, 
          0.003327925701860362}], Bold, StripOnInput -> False],StyleBox[
        "\"Legendary\"", 
         RGBColor[{0.7996144998988554, 0.029607160057840184`, 
          0.03042267225439035}], Bold, StripOnInput -> False],StyleBox[
        "\"Company\"", 
         RGBColor[{0.7996646380949582, 0.2153995752530412, 
          0.023248397014067543`}], Bold, StripOnInput -> False],StyleBox[
        "\"Culture\"", 
         RGBColor[{0.782634921272825, 0.0034989547461160143`, 
          0.06776240456473066}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"Join\"", 
         RGBColor[{0.0016535099367356943`, 0.00008254681139419617, 
          0.07922855778455822}], Bold, StripOnInput -> False],StyleBox[
        "\"Us\"", 
         RGBColor[{0.26998027531497776`, 0.000057271047451661227`, 
          0.7962228570306462}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      RowBox[{"Row", "[", 
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#1", ",", "#2", ",", "Bold"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"For\"\>", ",", "\<\"some\"\>", ",", "\<\"the\"\>", 
              ",", "\<\"word\"\>", ",", "\<\"'impossible'\"\>", 
              ",", "\<\"ends\"\>", ",", "\<\"discussions\"\>"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.000019410541220258543`, 0.2918543502313721, 
                    0.35857070544793324`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.000012940360813505695`, 0.19456956682091472`, 
                    0.23904713696528884`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.000019410541220258543`", ",", "0.2918543502313721`", 
                    ",", "0.35857070544793324`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.000019410541220258543`, 0.2918543502313721, 
                    0.35857070544793324`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.000019410541220258543`, 0.2918543502313721, 
                0.35857070544793324`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    1.077453830594427*^-6, 0.7928305643315516, 
                    0.06400978543348855], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   7.183025537296181*^-7, 0.5285537095543678, 
                    0.04267319028899237],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1.077453830594427`*^-6", ",", "0.7928305643315516`", ",",
                     "0.06400978543348855`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    1.077453830594427*^-6, 0.7928305643315516, 
                    0.06400978543348855]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{1.077453830594427*^-6, 0.7928305643315516, 
                0.06400978543348855}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    3.595087362419492*^-6, 0.7989200099278535, 
                    0.015494296150061267`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   2.3967249082796615`*^-6, 0.5326133399519024, 
                    0.010329530766707512`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "3.595087362419492`*^-6", ",", "0.7989200099278535`", ",",
                     "0.015494296150061267`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    3.595087362419492*^-6, 0.7989200099278535, 
                    0.015494296150061267`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{3.595087362419492*^-6, 0.7989200099278535, 
                0.015494296150061267`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    7.427703683022987*^-7, 0.7995714255782655, 
                    0.7008406291990777], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   4.951802455348659*^-7, 0.5330476170521771, 
                    0.4672270861327185],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "7.427703683022987`*^-7", ",", "0.7995714255782655`", ",",
                     "0.7008406291990777`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    7.427703683022987*^-7, 0.7995714255782655, 
                    0.7008406291990777]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{7.427703683022987*^-7, 0.7995714255782655, 
                0.7008406291990777}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    8.264703424576736*^-7, 0.7994355163236397, 
                    0.37833505649698806`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   5.509802283051158*^-7, 0.5329570108824265, 
                    0.2522233709979921],
                  FrameTicks->None,
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "8.264703424576736`*^-7", ",", "0.7994355163236397`", ",",
                     "0.37833505649698806`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    8.264703424576736*^-7, 0.7994355163236397, 
                    0.37833505649698806`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{8.264703424576736*^-7, 0.7994355163236397, 
                0.37833505649698806`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.000015527992573922595`, 0.7997755047608666, 
                    0.7677911845906993], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.00001035199504928173, 0.5331836698405777, 
                    0.5118607897271329],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.000015527992573922595`", ",", "0.7997755047608666`", 
                    ",", "0.7677911845906993`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.000015527992573922595`, 0.7997755047608666, 
                    0.7677911845906993]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.000015527992573922595`, 0.7997755047608666, 
                0.7677911845906993}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.000016134424098528246`, 0.7989194415271936, 
                    0.45801751306844096`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.000010756282732352165`, 0.5326129610181292, 
                    0.305345008712294],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.000016134424098528246`", ",", "0.7989194415271936`", 
                    ",", "0.45801751306844096`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.000016134424098528246`, 0.7989194415271936, 
                    0.45801751306844096`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.000016134424098528246`, 0.7989194415271936, 
                0.45801751306844096`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    1.213915445014968*^-6, 0.7983192502789108, 
                    0.19896242352177926`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   8.092769633433121*^-7, 0.532212833519274, 
                    0.13264161568118618`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1.213915445014968`*^-6", ",", "0.7983192502789108`", ",",
                     "0.19896242352177926`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    1.213915445014968*^-6, 0.7983192502789108, 
                    0.19896242352177926`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{1.213915445014968*^-6, 0.7983192502789108, 
                0.19896242352177926`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.00042390009947014003`, 0.7273459598110055, 
                    0.4081761714529384], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.0002826000663134267, 0.4848973065406703, 
                    0.2721174476352923],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.00042390009947014003`", ",", "0.7273459598110055`", 
                    ",", "0.4081761714529384`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.00042390009947014003`, 0.7273459598110055, 
                    0.4081761714529384]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.00042390009947014003`, 0.7273459598110055, 
                0.4081761714529384}],
               Editable->False,
               Selectable->False]}], "}"}]}], "}"}]}], "]"}], 
        ",", "\<\"  \"\>"}], "]"}]},
     {
      RowBox[{"Row", "[", 
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#1", ",", "#2", ",", "Bold"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"For\"\>", ",", "\<\"us\"\>", ",", "\<\"it's\"\>", 
              ",", "\<\"a\"\>", ",", "\<\"starting\"\>", 
              ",", "\<\"point\"\>"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.00001088682533873443, 0.24074215373850813`, 
                    0.5340622114448726], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   7.2578835591562875`*^-6, 0.16049476915900543`, 
                    0.3560414742965818],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.00001088682533873443`", ",", "0.24074215373850813`", 
                    ",", "0.5340622114448726`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.00001088682533873443, 0.24074215373850813`, 
                    0.5340622114448726]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.00001088682533873443, 0.24074215373850813`, 
                0.5340622114448726}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    9.199773048071487*^-7, 0.7850308390447818, 
                    0.2495143731761106], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   6.133182032047659*^-7, 0.5233538926965212, 
                    0.16634291545074043`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "9.199773048071487`*^-7", ",", "0.7850308390447818`", ",",
                     "0.2495143731761106`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    9.199773048071487*^-7, 0.7850308390447818, 
                    0.2495143731761106]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{9.199773048071487*^-7, 0.7850308390447818, 
                0.2495143731761106}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.00004716253407614868, 0.7999717023500365, 
                    0.3996524818993423], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.00003144168938409912, 0.5333144682333577, 
                    0.2664349879328949],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.00004716253407614868`", ",", "0.7999717023500365`", 
                    ",", "0.3996524818993423`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.00004716253407614868, 0.7999717023500365, 
                    0.3996524818993423]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               RGBColor[{0.00004716253407614868, 0.7999717023500365, 
                0.3996524818993423}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    1.891317638869547*^-6, 0.7999018486767578, 
                    0.7964883387747201], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   1.2608784259130313`*^-6, 0.5332678991178386, 
                    0.5309922258498134],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1.891317638869547`*^-6", ",", "0.7999018486767578`", ",",
                     "0.7964883387747201`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    1.891317638869547*^-6, 0.7999018486767578, 
                    0.7964883387747201]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{1.891317638869547*^-6, 0.7999018486767578, 
                0.7964883387747201}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    5.137435296370581*^-7, 0.7998685043355759, 
                    0.7988667846819777], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   3.424956864247054*^-7, 0.5332456695570507, 
                    0.5325778564546518],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "5.137435296370581`*^-7", ",", "0.7998685043355759`", ",",
                     "0.7988667846819777`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    5.137435296370581*^-7, 0.7998685043355759, 
                    0.7988667846819777]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{5.137435296370581*^-7, 0.7998685043355759, 
                0.7988667846819777}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    2.758563555497061*^-6, 0.7986451618517149, 
                    0.09630322649041617], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   1.8390423703313742`*^-6, 0.5324301079011433, 
                    0.06420215099361079],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2.758563555497061`*^-6", ",", "0.7986451618517149`", ",",
                     "0.09630322649041617`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    2.758563555497061*^-6, 0.7986451618517149, 
                    0.09630322649041617]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{2.758563555497061*^-6, 0.7986451618517149, 
                0.09630322649041617}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.00009054371363515854, 0.7929814950315333, 
                    0.28329617649830036`], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.00006036247575677236, 0.5286543300210222, 
                    0.18886411766553357`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.00009054371363515854`", ",", "0.7929814950315333`", 
                    ",", "0.28329617649830036`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.00009054371363515854, 0.7929814950315333, 
                    0.28329617649830036`]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.00009054371363515854, 0.7929814950315333, 
                0.28329617649830036`}],
               Editable->False,
               Selectable->False], ",", 
              InterpretationBox[
               ButtonBox[
                TooltipBox[
                 GraphicsBox[{
                   {GrayLevel[0], RectangleBox[{0, 0}]}, 
                   {GrayLevel[0], RectangleBox[{1, -1}]}, 
                   {RGBColor[
                    0.00015241030161213797`, 0.787887678104658, 
                    0.4161836344167495], RectangleBox[{0, -1}, {2, 1}]}},
                  AspectRatio->1,
                  DefaultBaseStyle->"ColorSwatchGraphics",
                  Frame->True,
                  
                  FrameStyle->RGBColor[
                   0.00010160686774142532`, 0.5252584520697721, 
                    0.27745575627783303`],
                  FrameTicks->None,
                  
                  ImageSize->
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}],
                  PlotRangePadding->None],
                 StyleBox[
                  RowBox[{"RGBColor", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0.00015241030161213797`", ",", "0.787887678104658`", ",",
                     "0.4161836344167495`"}], "}"}], "]"}], NumberMarks -> 
                  False]],
                Appearance->None,
                BaseStyle->{},
                BaselinePosition->Baseline,
                ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                  If[
                   Not[
                    AbsoluteCurrentValue["Deployed"]], 
                   SelectionMove[Typeset`box$, All, Expression]; 
                   FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                   FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.00015241030161213797`, 0.787887678104658, 
                    0.4161836344167495]; 
                   FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                   MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                DefaultBaseStyle->{},
                Evaluator->Automatic,
                Method->"Preemptive"],
               
               RGBColor[{0.00015241030161213797`, 0.787887678104658, 
                0.4161836344167495}],
               Editable->False,
               Selectable->False]}], "}"}]}], "}"}]}], "]"}], 
        ",", "\<\"  \"\>"}], "]"}]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"Technology\"", 
         RGBColor[{0.7992499772184884, 0.6956734928204751, 
          0.43957588274751896`}], Bold, StripOnInput -> False],StyleBox[
        "\"and\"", 
         RGBColor[{0.007418451981118463, 0.2925215590538545, 
          0.24105737215367595`}], Bold, StripOnInput -> False],StyleBox[
        "\"Innovation\"", 
         RGBColor[{0.7984724112469683, 0.017639102824928966`, 
          0.670117170564032}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"Learn\"", 
         RGBColor[{0.00033146401247961593`, 5.757209051394287*^-10, 
          0.016011526276251326`}], Bold, StripOnInput -> False],StyleBox[
        "\"More\"", 
         RGBColor[{0.4735589344316388, 1.8534636422715442`*^-8, 
          0.5543265989641329}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"James\"", 
         RGBColor[{0.7875479174435723, 0.7996898450394591, 
          0.7284346968884197}], Bold, StripOnInput -> False],StyleBox[
        "\"Webb\"", 
         RGBColor[{0.7991784340028467, 0.7997209296089048, 
          0.19248762276335482`}], Bold, StripOnInput -> False],StyleBox[
        "\"Space\"", 
         RGBColor[{0.7999999989047732, 0.7994630674892679, 
          0.009764545914527627}], Bold, StripOnInput -> False],StyleBox[
        "\"Telescope\"", 
         RGBColor[{0.7999971943117341, 0.7789113972472447, 
          0.03213554708769001}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"How\"", 
         RGBColor[{0.005148990435194028, 0.26617496991497974`, 
          0.46782814268656736`}], Bold, StripOnInput -> False],StyleBox[
        "\"Northrop\"", 
         RGBColor[{0.7998638655933845, 0.7999977972943071, 
          0.014791814674653674`}], Bold, StripOnInput -> False],StyleBox[
        "\"Grumman\"", 
         RGBColor[{0.7999993552942568, 0.7999990374622375, 
          0.003391887306461832}], Bold, StripOnInput -> False],StyleBox[
        "\"Prepared\"", 
         RGBColor[{0.7966918894423293, 0.23412499056321212`, 
          0.00012873435104358545`}], Bold, StripOnInput -> False],StyleBox[
        "\"the\"", 
         RGBColor[{0.46247946693585523`, 0.7482280529198195, 
          0.00010962909598771065`}], Bold, StripOnInput -> False],StyleBox[
        "\"Webb\"", 
         RGBColor[{0.7973992397188716, 0.7740173588103822, 
          0.00031730439108821023`}], Bold, StripOnInput -> False],StyleBox[
        "\"Sunshield\"", 
         RGBColor[{0.7999857708955624, 0.717952376132339, 
          7.142774317497215*^-6}], Bold, StripOnInput -> False],StyleBox[
        "\"to\"", 
         RGBColor[{0.07545056966381047, 0.6946524697024272, 
          0.0001913960456068698}], Bold, StripOnInput -> False],StyleBox[
        "\"Unfold\"", 
         RGBColor[{0.7898272544805618, 0.0030516149374934035`, 
          0.00030484751897874747`}], Bold, StripOnInput -> False],StyleBox[
        "\"Flawlessly\"", 
         RGBColor[{0.7985050643457785, 0.01920871825062989, 
          0.0005151439676437971}], Bold, StripOnInput -> False],StyleBox[
        "\"in\"", 
         RGBColor[{0.11882037709147526`, 0.41473184210532754`, 
          0.00024280052405652237`}], Bold, StripOnInput -> False],StyleBox[
        "\"Space\"", 
         RGBColor[{0.7999824845646925, 0.10669881438393287`, 
          0.0013299443507930088`}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]},
     {
      TemplateBox[{"  ","\"  \"",StyleBox["\"Learn\"", 
         RGBColor[{0.00033146401247961593`, 5.757209051394287*^-10, 
          0.016011526276251326`}], Bold, StripOnInput -> False],StyleBox[
        "\"More\"", 
         RGBColor[{0.4735589344316388, 1.8534636422715442`*^-8, 
          0.5543265989641329}], Bold, StripOnInput -> False]},
       "RowWithSeparators"]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.839672748475851*^9, {3.839674608059862*^9, 3.8396746252116823`*^9}, 
   3.839674728308264*^9, 3.839684802872053*^9, 3.839686174973875*^9, 
   3.876825829894291*^9},
 CellLabel->
  "Out[35]//TableForm=",ExpressionUUID->"da434503-2242-4625-915a-\
7a4ffb43bc33"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scratch", "Title",
 CellChangeTimes->{{3.8390791559759502`*^9, 
  3.839079162191298*^9}},ExpressionUUID->"1aeb7312-4580-4a2a-9ac4-\
5f3de642c16b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"features1", "=", 
   RowBox[{"FeatureExtract", "[", 
    RowBox[{"sentences", ",", "elmo"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xy1", "=", 
   RowBox[{"DimensionReduce", "[", 
    RowBox[{"features1", ",", "2", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<TSNE\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"xy1", "\[Rule]", "sentences"}], ",", 
   RowBox[{"PlotMarkers", "->", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Medium"}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", "None"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.839079295337709*^9, 3.839079378299466*^9}, {
   3.839079532578618*^9, 3.8390795414946404`*^9}, {3.839079622512541*^9, 
   3.839079622756028*^9}, 3.8390796996601553`*^9, {3.839079797742487*^9, 
   3.839079802845996*^9}, {3.8390798399513597`*^9, 3.839079898116891*^9}, 
   3.839080387974194*^9, {3.839080443967807*^9, 3.8390805227773027`*^9}, {
   3.8390805650959587`*^9, 3.8390805657450953`*^9}, 3.839080748743598*^9, {
   3.8390814125755377`*^9, 3.839081432910748*^9}, {3.839082936590518*^9, 
   3.839082944803029*^9}, {3.8396747629909067`*^9, 3.8396747692981997`*^9}, {
   3.839685167002273*^9, 3.839685167255351*^9}, {3.839685240629169*^9, 
   3.839685258963875*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"0e5a034e-b7e7-48b1-a55a-594dea67abc5"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[
          {EdgeForm[None], DiskBox[{0, 0}]}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Offset[10]], {{{
      46.26765441894531, -152.130859375}}, {{-49.153564453125, 
      581.064453125}}, {{-134.8672637939453, -177.66006469726562`}}, {{
      23.26336097717285, -319.8448486328125}}, {{
      229.51608276367188`, -45.43143844604492}}, {{39.844383239746094`, 
      108.39312744140625`}}, {{-54.91644287109375, 
      54.90734100341797}}, {{-116.26387023925781`, -453.2242736816406}}, \
{{-276.85003662109375`, 515.412109375}}, {{
      283.9958190917969, -327.9939880371094}}, {{
      120.10025024414062`, -249.42091369628906`}}, {{-110.93634796142578`, 
      465.9293212890625}}}]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}}, {{}, {{
      GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -8.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -10.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -8.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -10.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{28.5, -11.999999999999993`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{28.5, -24.999999999999993`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-28.5, -25.000000000000007`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-28.5, -12.000000000000007`}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-1.4695761589768238*^-15, -18.5}, \
{-110.93634796142578, 452.70964107188286}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{120.10025024414062`, -249.42091369628906`}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
             Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
             FrameMargins -> 2, BaselinePosition -> Automatic, StripOnInput -> 
             False], FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, {LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
              Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
              FrameMargins -> 2, BaselinePosition -> Automatic}], 
            FrameMargins -> 0], {}], "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.656854249492383, 0.3431457505076363}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492383, -14.656854249492364`}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-153.65685424949237`, -14.656854249492396`}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-153.65685424949237`, 0.3431457505076043}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"James Webb Space Telescope\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-81.65685424949238, -7.15685424949238}, \
{281.02699280998155, -337.3417135637947}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 
            13.456854249492386`}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{9.656854249492383, 
            0.4568542494923733}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-273.8812103392784, 524.7598349016854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-273.8812103392784, 524.7598349016854}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{8., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{10., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{8., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{10., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{138., 
            7.500000000000014}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{138., -7.499999999999986}, {-112.06531584718492`, \
-453.2242736816406}], 
           Offset[{12., -7.500000000000014}, {-112.06531584718492`, \
-453.2242736816406}], 
           Offset[{12., 
            7.499999999999986}, {-112.06531584718492`, \
-453.2242736816406}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Technology and Innovation\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{75., 0.}, {-112.06531584718492, -453.2242736816406}], \
{0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{8., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{10., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{8., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{10., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{132., 7.500000000000013}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{132., -7.499999999999987}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{12., -7.500000000000013}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{12., 7.499999999999987}, {-50.71788847902086, 
            54.90734100341797}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\" For us it's a starting point\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{72., 0.}, {-50.71788847902086, 54.90734100341797}], \
{0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 8.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 10.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 8.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 10.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{111., 27.000000000000025`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{111., 12.000000000000025`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{-111., 11.999999999999975`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{-111., 26.999999999999975`}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          
          RotationBox["\<\"For some the word 'impossible' ends \
discussions\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{39.844383239746094, 121.61280765858588}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{48.65685424949238, -0.45685424949237685`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{48.65685424949238, -13.456854249492377`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -13.456854249492386`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -0.45685424949238573`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Join Us\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{29.15685424949238, -6.956854249492381}, \
{232.48490904548717, -54.77916397273029}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{23.26336097717285, -319.8448486328125}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Northrop Grumman Recognized for our Legendary Company \
Culture\"", LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Northrop Grumman Recognized for our Legendary Company Culture", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{-134.8672637939453, -177.66006469726562`}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Forbes 2022 World\[CloseCurlyQuote]s Best Employers List", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 13.456854249492386`}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-46.1847381713097, 590.4121786516854}], 
           Offset[{9.656854249492383, 0.4568542494923733}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-46.1847381713097, 590.4121786516854}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 8.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 10.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 8.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 10.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{87., 27.00000000000002}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{87., 12.00000000000002}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{-87., 11.99999999999998}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{-87., 26.99999999999998}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{46.26765441894531, -138.91117915782038}], {0, 0}]}]}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->{{0.0000152587890625, 0.}, {0., 0.}},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-276.85003662109375`, 283.9958190917969}, {-453.2242736816406, 
   581.064453125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.08]}, {
     Scaled[0.05], 
     Scaled[0.0970820393249937]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.839672754617961*^9, 3.839674732376823*^9, 3.83968480560452*^9, 
   3.839685262997341*^9, 3.839686110773975*^9, 3.839686177629992*^9, 
   3.839686637958465*^9, {3.8396866700289507`*^9, 3.83968667959188*^9}, 
   3.8768258322335443`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"0baba0ab-8342-4ff5-88c5-3ca2790c09a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"xy1", "\[Rule]", "sentences"}], ",", 
   RowBox[{"PlotMarkers", "->", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Medium"}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", "None"}]}], "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"bd858825-42dc-4647-9763-2a8a9b3c45d0"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[
          {EdgeForm[None], DiskBox[{0, 0}]}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Offset[10]], {{{
      46.26765441894531, -152.130859375}}, {{-49.153564453125, 
      581.064453125}}, {{-134.8672637939453, -177.66006469726562`}}, {{
      23.26336097717285, -319.8448486328125}}, {{
      229.51608276367188`, -45.43143844604492}}, {{39.844383239746094`, 
      108.39312744140625`}}, {{-54.91644287109375, 
      54.90734100341797}}, {{-116.26387023925781`, -453.2242736816406}}, \
{{-276.85003662109375`, 515.412109375}}, {{
      283.9958190917969, -327.9939880371094}}, {{
      120.10025024414062`, -249.42091369628906`}}, {{-110.93634796142578`, 
      465.9293212890625}}}]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}}, {{}, {{
      GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -8.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -10.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -8.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -10.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{28.5, -11.999999999999993`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{28.5, -24.999999999999993`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-28.5, -25.000000000000007`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-28.5, -12.000000000000007`}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-1.4695761589768238*^-15, -18.5}, \
{-110.93634796142578, 452.70964107188286}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{120.10025024414062`, -249.42091369628906`}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
             Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
             FrameMargins -> 2, BaselinePosition -> Automatic, StripOnInput -> 
             False], FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, {LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
              Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
              FrameMargins -> 2, BaselinePosition -> Automatic}], 
            FrameMargins -> 0], {}], "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.656854249492383, 0.3431457505076363}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492383, -14.656854249492364`}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-153.65685424949237`, -14.656854249492396`}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-153.65685424949237`, 0.3431457505076043}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"James Webb Space Telescope\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-81.65685424949238, -7.15685424949238}, \
{281.02699280998155, -337.3417135637947}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 
            13.456854249492386`}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{9.656854249492383, 
            0.4568542494923733}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-273.8812103392784, 524.7598349016854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-273.8812103392784, 524.7598349016854}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{8., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{10., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{8., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{10., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{138., 
            7.500000000000014}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{138., -7.499999999999986}, {-112.06531584718492`, \
-453.2242736816406}], 
           Offset[{12., -7.500000000000014}, {-112.06531584718492`, \
-453.2242736816406}], 
           Offset[{12., 
            7.499999999999986}, {-112.06531584718492`, \
-453.2242736816406}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Technology and Innovation\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{75., 0.}, {-112.06531584718492, -453.2242736816406}], \
{0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{8., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{10., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{8., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{10., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{132., 7.500000000000013}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{132., -7.499999999999987}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{12., -7.500000000000013}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{12., 7.499999999999987}, {-50.71788847902086, 
            54.90734100341797}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\" For us it's a starting point\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{72., 0.}, {-50.71788847902086, 54.90734100341797}], \
{0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 8.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 10.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 8.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 10.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{111., 27.000000000000025`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{111., 12.000000000000025`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{-111., 11.999999999999975`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{-111., 26.999999999999975`}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          
          RotationBox["\<\"For some the word 'impossible' ends \
discussions\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{39.844383239746094, 121.61280765858588}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{48.65685424949238, -0.45685424949237685`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{48.65685424949238, -13.456854249492377`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -13.456854249492386`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -0.45685424949238573`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Join Us\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{29.15685424949238, -6.956854249492381}, \
{232.48490904548717, -54.77916397273029}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{23.26336097717285, -319.8448486328125}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Northrop Grumman Recognized for our Legendary Company \
Culture\"", LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Northrop Grumman Recognized for our Legendary Company Culture", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{-134.8672637939453, -177.66006469726562`}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Forbes 2022 World\[CloseCurlyQuote]s Best Employers List", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 13.456854249492386`}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-46.1847381713097, 590.4121786516854}], 
           Offset[{9.656854249492383, 0.4568542494923733}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-46.1847381713097, 590.4121786516854}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 8.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 10.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 8.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 10.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{87., 27.00000000000002}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{87., 12.00000000000002}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{-87., 11.99999999999998}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{-87., 26.99999999999998}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{46.26765441894531, -138.91117915782038}], {0, 0}]}]}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-276.85003662109375`, 283.9958190917969}, {-453.2242736816406, 
   581.064453125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.08]}, {
     Scaled[0.05], 
     Scaled[0.0970820393249937]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.839686687945643*^9, 3.876825832344314*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"e6b3a9e9-ead7-43c2-9fa2-52894881c8e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"sentences", "\[IndentingNewLine]", 
 RowBox[{"xy1", " ", "===", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"List", "/@", "xy1"}], ",", "1"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8396848127148323`*^9, 3.839684831915362*^9}, {
  3.839685169476033*^9, 3.83968520853158*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"7021d1b5-4fb0-4baf-a5fe-a1d5dbc19a6b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>", 
   ",", "\<\"Learn More\"\>", 
   ",", "\<\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"\>", 
   ",", "\<\"Northrop Grumman Recognized for our Legendary Company \
Culture\"\>", ",", "\<\"Join Us\"\>", 
   ",", "\<\"For some the word 'impossible' ends discussions\"\>", 
   ",", "\<\" For us it's a starting point\"\>", 
   ",", "\<\"Technology and Innovation\"\>", ",", "\<\"Learn More\"\>", 
   ",", "\<\"James Webb Space Telescope\"\>", 
   ",", "\<\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"\>", ",", "\<\"Learn More\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.839684814486661*^9, 3.839684832786626*^9}, 
   3.839685170767025*^9, 3.839685208958351*^9, 3.8396861776741323`*^9, 
   3.8768258323556337`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"6c8cb32d-566c-4860-aeff-dc1c967df072"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.839684814486661*^9, 3.839684832786626*^9}, 
   3.839685170767025*^9, 3.839685208958351*^9, 3.8396861776741323`*^9, 
   3.876825832357718*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"f14e866e-5553-41fc-9b36-7428bb340452"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"xy2", "=", 
   RowBox[{"DimensionReduce", "[", 
    RowBox[{"features1", ",", "3", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<TSNE\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"List", "/@", "xy2"}], ",", "1"}], "]"}], "\[Rule]", 
   "sentences"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8390806003778048`*^9, 3.839080645561809*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"479f4e51-4b74-4d67-bb24-193c12443322"],

Cell[BoxData[
 Graphics3DBox[{
   {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
     NCache[
      Rational[7, 360], 0.019444444444444445`]], 
    Point3DBox[{-136.22621154785156`, -1.904405951499939, \
-146.96701049804688`}], 
    Point3DBox[{192.12413024902344`, -130.81617736816406`, 
     515.1434936523438}], 
    Point3DBox[{-157.28958129882812`, 129.66891479492188`, -347.37841796875}],
     Point3DBox[{47.6553840637207, 43.670753479003906`, -242.00390625}], 
    Point3DBox[{-261.4736022949219, -3.5198681354522705`, 27.01150894165039}],
     Point3DBox[{12.940122604370117`, 298.0237121582031, -7.954663276672363}],
     Point3DBox[{-105.3355941772461, 309.9743347167969, -8.678614616394043}], 
    Point3DBox[{-218.6653594970703, -170.17730712890625`, \
-253.99627685546875`}], 
    Point3DBox[{306.4927062988281, -61.331233978271484`, 370.7758483886719}], 
    Point3DBox[{132.29293823242188`, -180.8212890625, -147.63836669921875`}], 
    Point3DBox[{-0.7197223901748657, -37.415409088134766`, \
-142.11129760742188`}], 
    Point3DBox[{188.20477294921875`, -195.35202026367188`, 
     383.79766845703125`}]}, {}, {{Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{-2.82842712474619, 2.8284271247461903`}, {0., 0.}], 
            Offset[{-2.82842712474619, 2.8284271247461903`}, {0., 0.}], 
            Offset[{-4.242640687119285, 4.242640687119286}, {0., 0.}], 
            Offset[{-4.242640687119285, 4.242640687119286}, {0., 0.}], 
            Offset[{-5.65685424949238, 5.656854249492381}, {0., 0.}], 
            Offset[{-7.65685424949238, 5.656854249492381}, {0., 0.}], 
            Offset[{-9.65685424949238, 5.656854249492381}, {0., 0.}], 
            Offset[{-9.65685424949238, 5.656854249492381}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{-2.82842712474619, 2.8284271247461903`}, {0., 0.}], 
            Offset[{-2.82842712474619, 2.8284271247461903`}, {0., 0.}], 
            Offset[{-4.242640687119285, 4.242640687119286}, {0., 0.}], 
            Offset[{-4.242640687119285, 4.242640687119286}, {0., 0.}], 
            Offset[{-5.65685424949238, 5.656854249492381}, {0., 0.}], 
            Offset[{-7.65685424949238, 5.656854249492381}, {0., 0.}], 
            Offset[{-9.65685424949238, 5.656854249492381}, {0., 0.}], 
            Offset[{-9.65685424949238, 5.656854249492381}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{-9.656854249492383, 13.456854249492388`}, {0., 0.}], 
            Offset[{-9.656854249492383, 0.4568542494923866}, {0., 0.}], 
            Offset[{-66.65685424949238, 0.4568542494923742}, {0., 0.}], 
            Offset[{-66.65685424949238, 13.456854249492373`}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"Learn More\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{-38.15685424949238, 6.95685424949238}, {0., 0.}], {0, 0}]}],
       
       AspectRatio->Full,
       ImageSize->{86, 42},
       PlotRange->
        NCache[{{-1 - 2^Rational[-1, 2], 1 - 2^Rational[-1, 2]}, {-1 + 
           2^Rational[-1, 2], 1 + 2^Rational[-1, 2]}}, {{-1.7071067811865475`,
          0.29289321881345254`}, {-0.29289321881345254`, 
         1.7071067811865475`}}]], {188.20477294921875`, -195.35202026367188`, 
      383.79766845703125`}, 
      Offset[{2.1627865594543785, -1.4229872457874086}, {0, 0}]], 
     TagBox[
      TooltipBox[
       {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], Opacity[0], 
        Point3DBox[{-0.7197223901748657, -37.415409088134766`, \
-142.11129760742188`}]},
       StyleBox[
        PaneBox[
         FrameBox[
         "\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"", LabelStyle -> {}, Background -> None, ContentPadding -> 
          False, LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
          Background -> GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 
          2, BaselinePosition -> Automatic, StripOnInput -> False], 
         FrameMargins -> 0], {}, StripOnInput -> False]],
      Annotation[#, 
       Style[
        Pane[
         Framed[
         "How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space", LabelStyle -> {}, Background -> None, ContentPadding -> 
          False, {LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
           Background -> GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 
           2, BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
       "Tooltip"]& ], Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{2.82842712474619, -2.8284271247461907`}, {0., 0.}], 
            Offset[{2.82842712474619, -2.8284271247461907`}, {0., 0.}], 
            Offset[{4.242640687119285, -4.242640687119286}, {0., 0.}], 
            Offset[{4.242640687119285, -4.242640687119286}, {0., 0.}], 
            Offset[{5.65685424949238, -5.6568542494923815`}, {0., 0.}], 
            Offset[{7.65685424949238, -5.6568542494923815`}, {0., 0.}], 
            Offset[{9.65685424949238, -5.6568542494923815`}, {0., 0.}], 
            Offset[{9.65685424949238, -5.6568542494923815`}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{2.82842712474619, -2.8284271247461907`}, {0., 0.}], 
            Offset[{2.82842712474619, -2.8284271247461907`}, {0., 0.}], 
            Offset[{4.242640687119285, -4.242640687119286}, {0., 0.}], 
            Offset[{4.242640687119285, -4.242640687119286}, {0., 0.}], 
            Offset[{5.65685424949238, -5.6568542494923815`}, {0., 0.}], 
            Offset[{7.65685424949238, -5.6568542494923815`}, {0., 0.}], 
            Offset[{9.65685424949238, -5.6568542494923815`}, {0., 0.}], 
            Offset[{9.65685424949238, -5.6568542494923815`}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{153.65685424949237`, 0.3431457505076345}, {0., 0.}], 
            Offset[{153.65685424949237`, -14.656854249492365`}, {0., 0.}], 
            Offset[{9.656854249492383, -14.656854249492397`}, {0., 0.}], 
            Offset[{9.656854249492383, 0.34314575050760254`}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"James Webb Space Telescope\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{81.65685424949238, -7.1568542494923815}, {0., 0.}], \
{0, 0}]}],
       AspectRatio->Full,
       ImageSize->{173, 44},
       PlotRange->
        NCache[{{-1 + 2^Rational[-1, 2], 1 + 2^Rational[-1, 2]}, {-1 - 2^
           Rational[-1, 2], 1 - 2^Rational[-1, 2]}}, {{-0.29289321881345254`, 
         1.7071067811865475`}, {-1.7071067811865475`, 
         0.29289321881345254`}}]], {
      132.29293823242188`, -180.8212890625, -147.63836669921875`}, 
      Offset[{-2.1627865594543785, 1.4229872457874086}, {0, 0}]], Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{-2.8284271247461907`, -2.82842712474619}, {0., 0.}], 
            Offset[{-2.8284271247461907`, -2.82842712474619}, {0., 0.}], 
            Offset[{-4.242640687119286, -4.242640687119285}, {0., 0.}], 
            Offset[{-4.242640687119286, -4.242640687119285}, {0., 0.}], 
            Offset[{-5.6568542494923815`, -5.65685424949238}, {0., 0.}], 
            Offset[{-7.6568542494923815`, -5.65685424949238}, {0., 0.}], 
            Offset[{-9.656854249492381, -5.65685424949238}, {0., 0.}], 
            Offset[{-9.656854249492381, -5.65685424949238}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{-2.8284271247461907`, -2.82842712474619}, {0., 0.}], 
            Offset[{-2.8284271247461907`, -2.82842712474619}, {0., 0.}], 
            Offset[{-4.242640687119286, -4.242640687119285}, {0., 0.}], 
            Offset[{-4.242640687119286, -4.242640687119285}, {0., 0.}], 
            Offset[{-5.6568542494923815`, -5.65685424949238}, {0., 0.}], 
            Offset[{-7.6568542494923815`, -5.65685424949238}, {0., 0.}], 
            Offset[{-9.656854249492381, -5.65685424949238}, {0., 0.}], 
            Offset[{-9.656854249492381, -5.65685424949238}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{-9.656854249492383, -0.4568542494923733}, {0., 0.}], 
            Offset[{-9.656854249492383, -13.456854249492373`}, {0., 0.}], 
            Offset[{-66.65685424949238, -13.456854249492386`}, {0., 0.}], 
            Offset[{-66.65685424949238, -0.45685424949238573`}, {0., 
             0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"Learn More\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{-38.15685424949238, -6.9568542494923795}, {0., 0.}], \
{0, 0}]}],
       AspectRatio->Full,
       ImageSize->{86, 42},
       PlotRange->
        NCache[{{-1 - 2^Rational[-1, 2], 1 - 2^Rational[-1, 2]}, {-1 - 2^
           Rational[-1, 2], 1 - 2^Rational[-1, 2]}}, {{-1.7071067811865475`, 
         0.29289321881345254`}, {-1.7071067811865475`, 
         0.29289321881345254`}}]], {306.4927062988281, -61.331233978271484`, 
      370.7758483886719}, 
      Offset[{2.1627865594543785, 1.4229872457874086}, {0, 0}]], 
     TagBox[
      TooltipBox[
       {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], Opacity[0], 
        Point3DBox[{-218.6653594970703, -170.17730712890625`, \
-253.99627685546875`}]},
       StyleBox[
        PaneBox[
         FrameBox[
         "\"Technology and Innovation\"", LabelStyle -> {}, Background -> 
          None, ContentPadding -> False, LabelStyle -> {}, Frame -> True, 
          RoundingRadius -> 4, Background -> GrayLevel[1, 0.65], FrameStyle -> 
          None, FrameMargins -> 2, BaselinePosition -> Automatic, 
          StripOnInput -> False], FrameMargins -> 0], {}, StripOnInput -> 
        False]],
      Annotation[#, 
       Style[
        Pane[
         Framed[
         "Technology and Innovation", LabelStyle -> {}, Background -> None, 
          ContentPadding -> False, {
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
           GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
           BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
       "Tooltip"]& ], Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{5.656854249492381, 5.65685424949238}, {0., 0.}], 
            Offset[{7.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{5.656854249492381, 5.65685424949238}, {0., 0.}], 
            Offset[{7.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{129.65685424949237`, 14.656854249492394`}, {0., 0.}], 
            Offset[{129.65685424949237`, -0.343145750507607}, {0., 0.}], 
            Offset[{9.656854249492383, -0.34314575050763363`}, {0., 0.}], 
            Offset[{9.656854249492383, 14.656854249492365`}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\" For us it's a starting point\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{69.65685424949238, 7.15685424949238}, {0., 0.}], {0, 0}]}],
       AspectRatio->Full,
       ImageSize->{149, 44},
       PlotRange->
        NCache[{{-1 + 2^Rational[-1, 2], 1 + 2^Rational[-1, 2]}, {-1 + 
           2^Rational[-1, 2], 1 + 
           2^Rational[-1, 2]}}, {{-0.29289321881345254`, 
         1.7071067811865475`}, {-0.29289321881345254`, 
         1.7071067811865475`}}]], {-105.3355941772461, 
      309.9743347167969, -8.678614616394043}, 
      Offset[{-2.1627865594543785, -1.4229872457874086}, {0, 0}]], 
     TagBox[
      TooltipBox[
       {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], Opacity[0], 
        Point3DBox[{12.940122604370117`, 
         298.0237121582031, -7.954663276672363}]},
       StyleBox[
        PaneBox[
         FrameBox[
         "\"For some the word 'impossible' ends discussions\"", 
          LabelStyle -> {}, Background -> None, ContentPadding -> False, 
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
          GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
          BaselinePosition -> Automatic, StripOnInput -> False], FrameMargins -> 
         0], {}, StripOnInput -> False]],
      Annotation[#, 
       Style[
        Pane[
         Framed[
         "For some the word 'impossible' ends discussions", LabelStyle -> {}, 
          Background -> None, ContentPadding -> False, {
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
           GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
           BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
       "Tooltip"]& ], Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{5.656854249492381, 5.65685424949238}, {0., 0.}], 
            Offset[{7.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{2.8284271247461903`, 2.82842712474619}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{4.242640687119286, 4.242640687119285}, {0., 0.}], 
            Offset[{5.656854249492381, 5.65685424949238}, {0., 0.}], 
            Offset[{7.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}], 
            Offset[{9.65685424949238, 5.65685424949238}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{48.65685424949238, 13.456854249492384`}, {0., 0.}], 
            Offset[{48.65685424949238, 0.45685424949238396`}, {0., 0.}], 
            Offset[{9.65685424949238, 0.4568542494923751}, {0., 0.}], 
            Offset[{9.65685424949238, 13.456854249492375`}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"Join Us\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{29.15685424949238, 6.9568542494923795}, {0., 0.}], {0, 0}]}],
       AspectRatio->Full,
       ImageSize->{68, 42},
       PlotRange->
        NCache[{{-1 + 2^Rational[-1, 2], 1 + 2^Rational[-1, 2]}, {-1 + 
           2^Rational[-1, 2], 1 + 
           2^Rational[-1, 2]}}, {{-0.29289321881345254`, 
         1.7071067811865475`}, {-0.29289321881345254`, 
         1.7071067811865475`}}]], {-261.4736022949219, -3.5198681354522705`, 
      27.01150894165039}, 
      Offset[{-2.1627865594543785, -1.4229872457874086}, {0, 0}]], 
     TagBox[
      TooltipBox[
       {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], Opacity[0], 
        Point3DBox[{47.6553840637207, 43.670753479003906`, -242.00390625}]},
       StyleBox[
        PaneBox[
         FrameBox[
         "\"Northrop Grumman Recognized for our Legendary Company Culture\"", 
          LabelStyle -> {}, Background -> None, ContentPadding -> False, 
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
          GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
          BaselinePosition -> Automatic, StripOnInput -> False], FrameMargins -> 
         0], {}, StripOnInput -> False]],
      Annotation[#, 
       Style[
        Pane[
         Framed[
         "Northrop Grumman Recognized for our Legendary Company Culture", 
          LabelStyle -> {}, Background -> None, ContentPadding -> False, {
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
           GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
           BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
       "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], Opacity[0], 
        Point3DBox[{-157.28958129882812`, 
         129.66891479492188`, -347.37841796875}]},
       StyleBox[
        PaneBox[
         FrameBox[
         "\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"", 
          LabelStyle -> {}, Background -> None, ContentPadding -> False, 
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
          GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
          BaselinePosition -> Automatic, StripOnInput -> False], FrameMargins -> 
         0], {}, StripOnInput -> False]],
      Annotation[#, 
       Style[
        Pane[
         Framed[
         "Forbes 2022 World\[CloseCurlyQuote]s Best Employers List", 
          LabelStyle -> {}, Background -> None, ContentPadding -> False, {
          LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
           GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
           BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
       "Tooltip"]& ], Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{4., 0.}, {0., 0.}], Offset[{4., 0.}, {0., 0.}], 
            Offset[{6., 0.}, {0., 0.}], Offset[{6., 0.}, {0., 0.}], 
            Offset[{8., 0.}, {0., 0.}], Offset[{10., 0.}, {0., 0.}], 
            Offset[{12., 0.}, {0., 0.}], Offset[{12., 0.}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{4., 0.}, {0., 0.}], Offset[{4., 0.}, {0., 0.}], 
            Offset[{6., 0.}, {0., 0.}], Offset[{6., 0.}, {0., 0.}], 
            Offset[{8., 0.}, {0., 0.}], Offset[{10., 0.}, {0., 0.}], 
            Offset[{12., 0.}, {0., 0.}], Offset[{12., 0.}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{69., 6.500000000000006}, {0., 0.}], 
            Offset[{69., -6.499999999999994}, {0., 0.}], 
            Offset[{12., -6.500000000000006}, {0., 0.}], 
            Offset[{12., 6.499999999999994}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"Learn More\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], Offset[{40.5, 0.}, {0., 0.}], {0, 0}]}],
       AspectRatio->Full,
       ImageSize->{86, 42},
       PlotRange->{{0, 2}, {-1, 1}}], {
      192.12413024902344`, -130.81617736816406`, 515.1434936523438}, 
      Offset[{-3.058642084898626, 0.}, {0, 0}]], Inset3DBox[
      GraphicsBox[GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{4., 0.}, {0., 0.}], Offset[{4., 0.}, {0., 0.}], 
            Offset[{6., 0.}, {0., 0.}], Offset[{6., 0.}, {0., 0.}], 
            Offset[{8., 0.}, {0., 0.}], Offset[{10., 0.}, {0., 0.}], 
            Offset[{12., 0.}, {0., 0.}], Offset[{12., 0.}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{4., 0.}, {0., 0.}], Offset[{4., 0.}, {0., 0.}], 
            Offset[{6., 0.}, {0., 0.}], Offset[{6., 0.}, {0., 0.}], 
            Offset[{8., 0.}, {0., 0.}], Offset[{10., 0.}, {0., 0.}], 
            Offset[{12., 0.}, {0., 0.}], Offset[{12., 0.}, {0., 0.}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{186., 7.5000000000000195`}, {0., 0.}], 
            Offset[{186., -7.4999999999999805`}, {0., 0.}], 
            Offset[{12., -7.5000000000000195`}, {0., 0.}], 
            Offset[{12., 7.4999999999999805`}, {0., 0.}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           
           RotationBox["\<\"ESPAStar\[Trademark]: A Freight Train to \
Space\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], Offset[{99., 0.}, {0., 0.}], {0, 0}]}],
       AspectRatio->Full,
       ImageSize->{203, 44},
       PlotRange->{{0, 2}, {-1, 
        1}}], {-136.22621154785156`, -1.904405951499939, \
-146.96701049804688`}, Offset[{-3.058642084898626, 0.}, {0, 0}]]}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{384.66919892033746`, 271.5839085556324},
  ImageSizeRaw->Automatic,
  PlotRange->{{-261.4736022949219, 306.4927062988281}, {-195.35202026367188`, 
    309.9743347167969}, Automatic},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {0, 
     Scaled[0.06]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.459930113365622, -0.08801145104634066, -3.0513698642696467`},
  ViewVertical->{-0.1014339060951856, 
   0.2965168917411705, -0.9496256607771444}]], "Output",
 CellChangeTimes->{3.839672755256484*^9, 3.839674733009536*^9, 
  3.8396848058574038`*^9, 3.8396861778585167`*^9, 3.87682583281826*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"adf00574-67b9-4f1d-a5a4-d146177c28d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xy1", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8396749607972813`*^9, 3.83967496834085*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"fdf01652-43b0-459f-9a33-f07eabb031e7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"46.26765441894531`", 
      RowBox[{"-", "152.130859375`"}]},
     {
      RowBox[{"-", "49.153564453125`"}], "581.064453125`"},
     {
      RowBox[{"-", "134.8672637939453`"}], 
      RowBox[{"-", "177.66006469726562`"}]},
     {"23.26336097717285`", 
      RowBox[{"-", "319.8448486328125`"}]},
     {"229.51608276367188`", 
      RowBox[{"-", "45.43143844604492`"}]},
     {"39.844383239746094`", "108.39312744140625`"},
     {
      RowBox[{"-", "54.91644287109375`"}], "54.90734100341797`"},
     {
      RowBox[{"-", "116.26387023925781`"}], 
      RowBox[{"-", "453.2242736816406`"}]},
     {
      RowBox[{"-", "276.85003662109375`"}], "515.412109375`"},
     {"283.9958190917969`", 
      RowBox[{"-", "327.9939880371094`"}]},
     {"120.10025024414062`", 
      RowBox[{"-", "249.42091369628906`"}]},
     {
      RowBox[{"-", "110.93634796142578`"}], "465.9293212890625`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.839674961673316*^9, 3.839674968717111*^9}, 
   3.839684805872031*^9, 3.839686177872963*^9, 3.8768258328328743`*^9},
 CellLabel->
  "Out[44]//MatrixForm=",ExpressionUUID->"00edbe4a-7042-4d44-b217-\
e23f9ebf5819"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xy1", "\[Rule]", "sentences"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"e7c3c394-c56c-456d-993b-b86eeb335fa3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"46.26765441894531`", ",", 
      RowBox[{"-", "152.130859375`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "49.153564453125`"}], ",", "581.064453125`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "134.8672637939453`"}], ",", 
      RowBox[{"-", "177.66006469726562`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"23.26336097717285`", ",", 
      RowBox[{"-", "319.8448486328125`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"229.51608276367188`", ",", 
      RowBox[{"-", "45.43143844604492`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"39.844383239746094`", ",", "108.39312744140625`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "54.91644287109375`"}], ",", "54.90734100341797`"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "116.26387023925781`"}], ",", 
      RowBox[{"-", "453.2242736816406`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "276.85003662109375`"}], ",", "515.412109375`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"283.9958190917969`", ",", 
      RowBox[{"-", "327.9939880371094`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"120.10025024414062`", ",", 
      RowBox[{"-", "249.42091369628906`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "110.93634796142578`"}], ",", "465.9293212890625`"}], 
     "}"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>", 
    ",", "\<\"Learn More\"\>", 
    ",", "\<\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"\>", 
    ",", "\<\"Northrop Grumman Recognized for our Legendary Company Culture\"\
\>", ",", "\<\"Join Us\"\>", 
    ",", "\<\"For some the word 'impossible' ends discussions\"\>", 
    ",", "\<\" For us it's a starting point\"\>", 
    ",", "\<\"Technology and Innovation\"\>", ",", "\<\"Learn More\"\>", 
    ",", "\<\"James Webb Space Telescope\"\>", 
    ",", "\<\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"\>", ",", "\<\"Learn More\"\>"}], "}"}]}]], "Output",
 CellChangeTimes->{3.839686266008329*^9, 3.8768258328617353`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"562178b2-6d75-4b33-a05d-a9cecfc20223"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"xy1", "\[Rule]", "sentences"}], ",", 
   RowBox[{"PlotMarkers", "->", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Medium"}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", "None"}]}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"b7eb48e5-622e-4aad-9ed1-1997dba8bbdb"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[
          {EdgeForm[None], DiskBox[{0, 0}]}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Offset[10]], {{{
      46.26765441894531, -152.130859375}}, {{-49.153564453125, 
      581.064453125}}, {{-134.8672637939453, -177.66006469726562`}}, {{
      23.26336097717285, -319.8448486328125}}, {{
      229.51608276367188`, -45.43143844604492}}, {{39.844383239746094`, 
      108.39312744140625`}}, {{-54.91644287109375, 
      54.90734100341797}}, {{-116.26387023925781`, -453.2242736816406}}, \
{{-276.85003662109375`, 515.412109375}}, {{
      283.9958190917969, -327.9939880371094}}, {{
      120.10025024414062`, -249.42091369628906`}}, {{-110.93634796142578`, 
      465.9293212890625}}}]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}}, {{}, {{
      GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -8.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -10.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-7.347880794884119*^-16, -4.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.102182119232618*^-15, -6.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -8.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -10.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-1.4695761589768238`*^-15, -12.}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{28.5, -11.999999999999993`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{28.5, -24.999999999999993`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-28.5, -25.000000000000007`}, {-110.93634796142578`, 
            452.70964107188286`}], 
           Offset[{-28.5, -12.000000000000007`}, {-110.93634796142578`, 
            452.70964107188286`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-1.4695761589768238*^-15, -18.5}, \
{-110.93634796142578, 452.70964107188286}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{120.10025024414062`, -249.42091369628906`}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
             Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
             FrameMargins -> 2, BaselinePosition -> Automatic, StripOnInput -> 
             False], FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space", LabelStyle -> {}, Background -> None, ContentPadding -> 
             False, {LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
              Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
              FrameMargins -> 2, BaselinePosition -> Automatic}], 
            FrameMargins -> 0], {}], "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-2.8284271247461907`, -2.82842712474619}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-4.242640687119286, -4.242640687119285}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-5.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-7.6568542494923815`, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492381, -5.65685424949238}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.656854249492383, 0.3431457505076363}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-9.656854249492383, -14.656854249492364`}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-153.65685424949237`, -14.656854249492396`}, {
            281.02699280998155`, -337.3417135637947}], 
           Offset[{-153.65685424949237`, 0.3431457505076043}, {
            281.02699280998155`, -337.3417135637947}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"James Webb Space Telescope\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-81.65685424949238, -7.15685424949238}, \
{281.02699280998155, -337.3417135637947}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{2.8284271247461903`, 
            2.82842712474619}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-273.8812103392784,
             524.7598349016854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-273.8812103392784, 
            524.7598349016854}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 
            13.456854249492386`}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{9.656854249492383, 
            0.4568542494923733}, {-273.8812103392784, 524.7598349016854}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-273.8812103392784, 524.7598349016854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-273.8812103392784, 524.7598349016854}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{8., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{10., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{4., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{6., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{8., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{10., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{12., 0.}, {-112.06531584718492`, -453.2242736816406}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{138., 
            7.500000000000014}, {-112.06531584718492`, -453.2242736816406}], 
           Offset[{138., -7.499999999999986}, {-112.06531584718492`, \
-453.2242736816406}], 
           Offset[{12., -7.500000000000014}, {-112.06531584718492`, \
-453.2242736816406}], 
           Offset[{12., 
            7.499999999999986}, {-112.06531584718492`, \
-453.2242736816406}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Technology and Innovation\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{75., 0.}, {-112.06531584718492, -453.2242736816406}], \
{0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{8., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{10., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{4., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{6., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{8., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{10., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}], 
           Offset[{12., 0.}, {-50.71788847902086, 54.90734100341797}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{132., 7.500000000000013}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{132., -7.499999999999987}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{12., -7.500000000000013}, {-50.71788847902086, 
            54.90734100341797}], 
           Offset[{12., 7.499999999999987}, {-50.71788847902086, 
            54.90734100341797}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\" For us it's a starting point\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{72., 0.}, {-50.71788847902086, 54.90734100341797}], \
{0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 8.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 10.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 8.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 10.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{4.898587196589413*^-16, 12.}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{111., 27.000000000000025`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{111., 12.000000000000025`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{-111., 11.999999999999975`}, {39.844383239746094`, 
            121.61280765858588`}], 
           Offset[{-111., 26.999999999999975`}, {39.844383239746094`, 
            121.61280765858588`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          
          RotationBox["\<\"For some the word 'impossible' ends \
discussions\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{39.844383239746094, 121.61280765858588}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{2.82842712474619, -2.8284271247461907`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{4.242640687119285, -4.242640687119286}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{5.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{7.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -5.6568542494923815`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{48.65685424949238, -0.45685424949237685`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{48.65685424949238, -13.456854249492377`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -13.456854249492386`}, {
            232.48490904548717`, -54.77916397273029}], 
           Offset[{9.65685424949238, -0.45685424949238573`}, {
            232.48490904548717`, -54.77916397273029}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Join Us\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{29.15685424949238, -6.956854249492381}, \
{232.48490904548717, -54.77916397273029}], {0, 0}]}], 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{23.26336097717285, -319.8448486328125}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Northrop Grumman Recognized for our Legendary Company \
Culture\"", LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Northrop Grumman Recognized for our Legendary Company Culture", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, 
      {Opacity[0], 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], 
        TagBox[
         TooltipBox[PointBox[{-134.8672637939453, -177.66006469726562`}],
          StyleBox[
           PaneBox[
            FrameBox[
            "\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, 
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
             GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
             BaselinePosition -> Automatic, StripOnInput -> False], 
            FrameMargins -> 0], {}, StripOnInput -> False]],
         Annotation[#, 
          Style[
           Pane[
            Framed[
            "Forbes 2022 World\[CloseCurlyQuote]s Best Employers List", 
             LabelStyle -> {}, Background -> None, ContentPadding -> False, {
             LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, Background -> 
              GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
              BaselinePosition -> Automatic}], FrameMargins -> 0], {}], 
          "Tooltip"]& ]}}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{2.8284271247461903`, 2.82842712474619}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{4.242640687119286, 4.242640687119285}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{66.65685424949238, 13.456854249492386`}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{66.65685424949238, 
            0.45685424949238573`}, {-46.1847381713097, 590.4121786516854}], 
           Offset[{9.656854249492383, 0.4568542494923733}, {-46.1847381713097,
             590.4121786516854}], 
           Offset[{9.656854249492383, 
            13.456854249492373`}, {-46.1847381713097, 
            590.4121786516854}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Learn More\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{38.15685424949238, 6.9568542494923795}, \
{-46.1847381713097, 590.4121786516854}], {0, 0}]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 8.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 10.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{2.4492935982947064`*^-16, 4.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{3.6739403974420594`*^-16, 6.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 8.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 10.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{4.898587196589413*^-16, 12.}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{87., 27.00000000000002}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{87., 12.00000000000002}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{-87., 11.99999999999998}, {
            46.26765441894531, -138.91117915782038`}], 
           Offset[{-87., 26.99999999999998}, {
            46.26765441894531, -138.91117915782038`}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{4.898587196589413*^-16, 19.5}, \
{46.26765441894531, -138.91117915782038}], {0, 0}]}]}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{680.23876953125, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-276.85003662109375`, 283.9958190917969}, {-453.2242736816406, 
   581.064453125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.08]}, {
     Scaled[0.05], 
     Scaled[0.0970820393249937]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8396866189187107`*^9, 3.839686693258341*^9, 
  3.8768258329653397`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"7b466c42-efcb-4235-819d-48214868206f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xy1", "\[Rule]", "sentences"}]], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"9c345f9b-1036-431a-bff3-8e3f37e67384"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"46.26765441894531`", ",", 
      RowBox[{"-", "152.130859375`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "49.153564453125`"}], ",", "581.064453125`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "134.8672637939453`"}], ",", 
      RowBox[{"-", "177.66006469726562`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"23.26336097717285`", ",", 
      RowBox[{"-", "319.8448486328125`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"229.51608276367188`", ",", 
      RowBox[{"-", "45.43143844604492`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"39.844383239746094`", ",", "108.39312744140625`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "54.91644287109375`"}], ",", "54.90734100341797`"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "116.26387023925781`"}], ",", 
      RowBox[{"-", "453.2242736816406`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "276.85003662109375`"}], ",", "515.412109375`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"283.9958190917969`", ",", 
      RowBox[{"-", "327.9939880371094`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"120.10025024414062`", ",", 
      RowBox[{"-", "249.42091369628906`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "110.93634796142578`"}], ",", "465.9293212890625`"}], 
     "}"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\<\"ESPAStar\[Trademark]: A Freight Train to Space\"\>", 
    ",", "\<\"Learn More\"\>", 
    ",", "\<\"Forbes 2022 World\[CloseCurlyQuote]s Best Employers List\"\>", 
    ",", "\<\"Northrop Grumman Recognized for our Legendary Company Culture\"\
\>", ",", "\<\"Join Us\"\>", 
    ",", "\<\"For some the word 'impossible' ends discussions\"\>", 
    ",", "\<\" For us it's a starting point\"\>", 
    ",", "\<\"Technology and Innovation\"\>", ",", "\<\"Learn More\"\>", 
    ",", "\<\"James Webb Space Telescope\"\>", 
    ",", "\<\"How Northrop Grumman Prepared the Webb Sunshield to Unfold \
Flawlessly in Space\"\>", ",", "\<\"Learn More\"\>"}], "}"}]}]], "Output",
 CellChangeTimes->{3.839686737236766*^9, 3.8768258329979486`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"52704b9c-e820-4b8f-aec7-aada232c610c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}]}], "}"}]}], "\[IndentingNewLine]", 
   "}"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.83968674256355*^9, 3.8396867908721123`*^9}, {
  3.839686871702463*^9, 3.839686896901609*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"0151af7a-51b7-493c-b36a-302ba3ed7e0a"],

Cell[BoxData[
 GraphicsBox[{{}, {{
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{1., 2.}, {2., 3.}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{15., 24.}, {15., 24.}}]}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}, {}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}, {}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 15.}, {0, 24.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.839686754409171*^9, 3.839686791380816*^9}, 
   3.839686897439434*^9, 3.8768258330347137`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"3778d268-1132-4eca-b69e-66ebbae00225"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.839687737293703*^9, 3.839687738024132*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"7aecc596-54b8-4ae3-8898-a082d2444236"],

Cell[CellGroupData[{

Cell[BoxData["xy1"], "Input",
 CellChangeTimes->{{3.839687735473571*^9, 3.839687736903502*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"eb1ce018-98d4-46bf-85c8-70bcb179910c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"46.26765441894531`", ",", 
     RowBox[{"-", "152.130859375`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "49.153564453125`"}], ",", "581.064453125`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "134.8672637939453`"}], ",", 
     RowBox[{"-", "177.66006469726562`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23.26336097717285`", ",", 
     RowBox[{"-", "319.8448486328125`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"229.51608276367188`", ",", 
     RowBox[{"-", "45.43143844604492`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"39.844383239746094`", ",", "108.39312744140625`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "54.91644287109375`"}], ",", "54.90734100341797`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "116.26387023925781`"}], ",", 
     RowBox[{"-", "453.2242736816406`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "276.85003662109375`"}], ",", "515.412109375`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"283.9958190917969`", ",", 
     RowBox[{"-", "327.9939880371094`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"120.10025024414062`", ",", 
     RowBox[{"-", "249.42091369628906`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "110.93634796142578`"}], ",", "465.9293212890625`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.83968774011867*^9, 3.876825833073038*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"6b71e1c6-7c4e-44a3-b8b9-b4c8f3e788aa"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8396879279874287`*^9, 3.839687929050506*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"896b1763-5e06-4b01-9c4f-ad2e9ac264fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"FindClusters", "[", 
   RowBox[{"xy1", ",", "3", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<KMeans\>\""}]}], "]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.839687741494903*^9, 3.839687753979781*^9}, {
  3.83968785426989*^9, 3.839687864006691*^9}, {3.839687896122396*^9, 
  3.839687927441532*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"fa81ce99-5e31-44e7-84b6-636e07a9d618"],

Cell[BoxData[
 GraphicsBox[{{}, {{
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{
       46.26765441894531, -152.130859375}, {-134.8672637939453, \
-177.66006469726562`}, {23.26336097717285, -319.8448486328125}, {
       39.844383239746094`, 108.39312744140625`}, {-54.91644287109375, 
       54.90734100341797}, {-116.26387023925781`, -453.2242736816406}, {
       120.10025024414062`, -249.42091369628906`}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{-49.153564453125, 581.064453125}, {-276.85003662109375`, 
       515.412109375}, {-110.93634796142578`, 465.9293212890625}}]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{229.51608276367188`, -45.43143844604492}, {
       283.9958190917969, -327.9939880371094}}]}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
      0.012833333333333334`], AbsoluteThickness[
      1.6]}, {}, {}, {}, {}, {}, {}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
      0.012833333333333334`], AbsoluteThickness[
      1.6]}, {}, {}, {}, {}, {}, {}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{647.9201354980469, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-276.85003662109375`, 283.9958190917969}, {-453.2242736816406, 
   581.064453125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8396877475361147`*^9, 3.839687754630321*^9}, 
   3.839687865267106*^9, {3.839687897161869*^9, 3.83968793218989*^9}, 
   3.8768258331890287`*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"054d628e-1f0f-43bf-9139-6be5f083f9f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"EuclideanDistance", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "4"}], "}"}]}], "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.839688275833273*^9, 3.839688295974319*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"656e5f71-4230-4826-b843-b53d002b0d94"],

Cell[BoxData["2.23606797749979`"], "Output",
 CellChangeTimes->{{3.839688292686532*^9, 3.8396882965028553`*^9}, 
   3.8768258331982594`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"044eea8e-86ff-4471-a850-f8f894ffe312"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1399, 973},
WindowMargins->{{Automatic, 137}, {Automatic, -905}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 158, 3, 54, "Subsection",ExpressionUUID->"e1b351bc-02a4-446c-8819-14d7e1cc067e"],
Cell[CellGroupData[{
Cell[763, 29, 3071, 72, 178, "Input",ExpressionUUID->"bc40a4b0-3342-493c-ba60-c94681d2ee43"],
Cell[3837, 103, 311901, 5961, 75, "Output",ExpressionUUID->"6f7774f6-8e16-4b06-bca6-532bd6d69c82"],
Cell[315741, 6066, 315327, 6018, 75, "Output",ExpressionUUID->"11ab7c83-10b9-44ff-81d7-2958f7549a1b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[631117, 12090, 255, 4, 54, "Subsection",ExpressionUUID->"3372f7fe-8dbd-4e8d-b107-47379e39eb7b"],
Cell[CellGroupData[{
Cell[631397, 12098, 1305, 27, 73, "Input",ExpressionUUID->"1d05769a-57f1-42d9-a0a5-8057092c143f"],
Cell[632705, 12127, 675, 9, 245, "Output",ExpressionUUID->"04182414-0670-45ce-9fb7-2ca1c1ab5da2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[633429, 12142, 164, 3, 54, "Subsection",ExpressionUUID->"f8314751-4f16-4bbc-9d3e-8ff39a796ea4"],
Cell[633596, 12147, 2249, 47, 94, "Input",ExpressionUUID->"53c3031b-a021-40ff-a8ab-f0ea33918005"]
}, Open  ]],
Cell[CellGroupData[{
Cell[635882, 12199, 261, 4, 54, "Subsection",ExpressionUUID->"94cb2815-fc5a-4ac3-b622-56409b490701"],
Cell[CellGroupData[{
Cell[636168, 12207, 1075, 18, 52, "Input",ExpressionUUID->"f6eb3daa-8e27-4e5d-864a-cb73d4886681"],
Cell[637246, 12227, 37314, 751, 684, "Output",ExpressionUUID->"52316ca3-2786-44b7-b0eb-9c5e310ee6de"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[674609, 12984, 156, 3, 54, "Subsection",ExpressionUUID->"d693ba3d-1d70-4699-bf83-a14d53d9b3e6"],
Cell[CellGroupData[{
Cell[674790, 12991, 1801, 48, 115, "Input",ExpressionUUID->"548d161b-8318-41dc-989e-f6c293bfedec"],
Cell[676594, 13041, 916, 17, 24, "Message",ExpressionUUID->"b899fedb-50ac-4e86-b950-9020ae64564b"],
Cell[677513, 13060, 17372, 267, 24, "Message",ExpressionUUID->"700ae9ec-f11f-4046-93ea-ecdf4e0505aa"],
Cell[694888, 13329, 17300, 263, 24, "Message",ExpressionUUID->"729fd982-a3b8-463f-ad53-bf79c567e17f"],
Cell[712191, 13594, 19510, 301, 24, "Message",ExpressionUUID->"56fa9df7-04ef-46ed-8250-4fcf910c3c1a"],
Cell[731704, 13897, 598, 13, 24, "Message",ExpressionUUID->"bebfb9b7-de88-4007-a323-361766ea624f"],
Cell[732305, 13912, 97440, 2188, 238, "Output",ExpressionUUID->"da434503-2242-4625-915a-7a4ffb43bc33"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[829794, 16106, 152, 3, 98, "Title",ExpressionUUID->"1aeb7312-4580-4a2a-9ac4-5f3de642c16b"],
Cell[CellGroupData[{
Cell[829971, 16113, 1439, 29, 94, "Input",ExpressionUUID->"0e5a034e-b7e7-48b1-a55a-594dea67abc5"],
Cell[831413, 16144, 35069, 701, 240, "Output",ExpressionUUID->"0baba0ab-8342-4ff5-88c5-3ca2790c09a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[866519, 16850, 358, 8, 30, "Input",ExpressionUUID->"bd858825-42dc-4647-9763-2a8a9b3c45d0"],
Cell[866880, 16860, 34820, 696, 240, "Output",ExpressionUUID->"e6b3a9e9-ead7-43c2-9fa2-52894881c8e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[901737, 17561, 385, 7, 52, "Input",ExpressionUUID->"7021d1b5-4fb0-4baf-a5fe-a1d5dbc19a6b"],
Cell[902125, 17570, 943, 16, 77, "Output",ExpressionUUID->"6c8cb32d-566c-4860-aeff-dc1c967df072"],
Cell[903071, 17588, 274, 4, 34, "Output",ExpressionUUID->"f14e866e-5553-41fc-9b36-7428bb340452"]
}, Open  ]],
Cell[CellGroupData[{
Cell[903382, 17597, 557, 14, 52, "Input",ExpressionUUID->"479f4e51-4b74-4d67-bb24-193c12443322"],
Cell[903942, 17613, 27022, 547, 324, "Output",ExpressionUUID->"adf00574-67b9-4f1d-a5a4-d146177c28d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[931001, 18165, 207, 3, 30, "Input",ExpressionUUID->"fdf01652-43b0-459f-9a33-f07eabb031e7"],
Cell[931211, 18170, 1575, 43, 230, "Output",ExpressionUUID->"00edbe4a-7042-4d44-b217-e23f9ebf5819"]
}, Open  ]],
Cell[CellGroupData[{
Cell[932823, 18218, 144, 2, 30, "Input",ExpressionUUID->"e7c3c394-c56c-456d-993b-b86eeb335fa3"],
Cell[932970, 18222, 2355, 59, 119, "Output",ExpressionUUID->"562178b2-6d75-4b33-a05d-a9cecfc20223"]
}, Open  ]],
Cell[CellGroupData[{
Cell[935362, 18286, 358, 8, 30, "Input",ExpressionUUID->"b7eb48e5-622e-4aad-9ed1-1997dba8bbdb"],
Cell[935723, 18296, 34892, 698, 439, "Output",ExpressionUUID->"7b466c42-efcb-4235-819d-48214868206f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970652, 18999, 144, 2, 30, "Input",ExpressionUUID->"9c345f9b-1036-431a-bff3-8e3f37e67384"],
Cell[970799, 19003, 2355, 59, 119, "Output",ExpressionUUID->"52704b9c-e820-4b8f-aec7-aada232c610c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[973191, 19067, 716, 19, 115, "Input",ExpressionUUID->"0151af7a-51b7-493c-b36a-302ba3ed7e0a"],
Cell[973910, 19088, 1968, 48, 251, "Output",ExpressionUUID->"3778d268-1132-4eca-b69e-66ebbae00225"]
}, Open  ]],
Cell[975893, 19139, 171, 2, 30, "Input",ExpressionUUID->"7aecc596-54b8-4ae3-8898-a082d2444236"],
Cell[CellGroupData[{
Cell[976089, 19145, 174, 2, 30, "Input",ExpressionUUID->"eb1ce018-98d4-46bf-85c8-70bcb179910c"],
Cell[976266, 19149, 1592, 44, 56, "Output",ExpressionUUID->"6b71e1c6-7c4e-44a3-b8b9-b4c8f3e788aa"]
}, Open  ]],
Cell[977873, 19196, 173, 2, 30, "Input",ExpressionUUID->"896b1763-5e06-4b01-9c4f-ad2e9ac264fb"],
Cell[CellGroupData[{
Cell[978071, 19202, 434, 9, 30, "Input",ExpressionUUID->"fa81ce99-5e31-44e7-84b6-636e07a9d618"],
Cell[978508, 19213, 3035, 67, 418, "Output",ExpressionUUID->"054d628e-1f0f-43bf-9139-6be5f083f9f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[981580, 19285, 408, 10, 30, "Input",ExpressionUUID->"656e5f71-4230-4826-b843-b53d002b0d94"],
Cell[981991, 19297, 219, 3, 34, "Output",ExpressionUUID->"044eea8e-86ff-4471-a850-f8f894ffe312"]
}, Open  ]]
}, Open  ]]
}
]
*)

